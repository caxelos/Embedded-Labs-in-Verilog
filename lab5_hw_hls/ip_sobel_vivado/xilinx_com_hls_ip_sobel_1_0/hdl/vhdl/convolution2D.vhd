-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    posy : IN STD_LOGIC_VECTOR (5 downto 0);
    posx : IN STD_LOGIC_VECTOR (6 downto 0);
    input_img_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_img_ce0 : OUT STD_LOGIC;
    input_img_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_img_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_img_ce1 : OUT STD_LOGIC;
    input_img_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (1 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (3 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (1 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (2 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (2 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of convolution2D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_FCD : STD_LOGIC_VECTOR (11 downto 0) := "111111001101";
    constant ap_const_lv12_31 : STD_LOGIC_VECTOR (11 downto 0) := "000000110001";
    constant ap_const_lv7_4E : STD_LOGIC_VECTOR (6 downto 0) := "1001110";
    constant ap_const_lv12_33 : STD_LOGIC_VECTOR (11 downto 0) := "000000110011";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv12_FCF : STD_LOGIC_VECTOR (11 downto 0) := "111111001111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011001 : BOOLEAN;
    signal reg_167 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_428 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_read_1_reg_437 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_read_2_reg_442 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_p_read_2_reg_442 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_read_3_reg_447 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_p_read_3_reg_447 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_read_4_reg_452 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter1_p_read_4_reg_452 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_read_5_reg_457 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter1_p_read_5_reg_457 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_read_6_reg_462 : STD_LOGIC_VECTOR (1 downto 0);
    signal posx_read_reg_467 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_186_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_reg_474 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_img_load_1_reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_227_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_reg_502 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_img_load_2_reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_img_load_3_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_1_2_fu_277_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_1_2_reg_537 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_383_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp8_reg_557 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_391_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_2_0_1_reg_562 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_399_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_reg_567 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_407_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp6_reg_572 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal ap_port_reg_posx : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_port_reg_p_read : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_port_reg_p_read1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_port_reg_p_read3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_port_reg_p_read5 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_port_reg_p_read7 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_port_reg_p_read8 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_36_0_1_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_flag00000000 : BOOLEAN;
    signal tmp_36_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_0_2_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_1_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal tmp_36_2_2_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_2_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal tmp_36_2_1_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_1_2_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_176_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal posx_cast1_fu_182_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_fu_191_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_0_1_fu_196_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_207_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_0_2_fu_217_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_cast_fu_232_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_1_fu_235_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_2_2_fu_245_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_cast_fu_273_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_2_fu_282_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp4_fu_292_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal posx_cast_fu_301_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp49_cast_fu_297_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_35_2_1_fu_304_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_0_2_cast_fu_350_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal res_2_0_2_fu_353_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of res_2_0_2_fu_353_p2 : signal is "no";
    signal grp_fu_415_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp7_cast_fu_375_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_391_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_399_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_399_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_415_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_415_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_176_ce : STD_LOGIC;
    signal grp_fu_262_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_176_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_262_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_383_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_383_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_391_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_399_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_399_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_407_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_415_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_415_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component ip_sobel_mul_6ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component ip_sobel_mul_2s_8cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component ip_sobel_mac_muladEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component ip_sobel_mac_mulaeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component ip_sobel_mac_mulafYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component ip_sobel_mac_mulag8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component ip_sobel_mac_mulahbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    ip_sobel_mul_6ns_bkb_U1 : component ip_sobel_mul_6ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_176_p0,
        din1 => grp_fu_176_p1,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);

    ip_sobel_mul_2s_8cud_U2 : component ip_sobel_mul_2s_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read_6_reg_462,
        din1 => grp_fu_262_p1,
        ce => grp_fu_262_ce,
        dout => grp_fu_262_p2);

    ip_sobel_mac_muladEe_U3 : component ip_sobel_mac_muladEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => p_read_1_reg_437,
        din1 => grp_fu_383_p1,
        din2 => grp_fu_383_p2,
        dout => grp_fu_383_p3);

    ip_sobel_mac_mulaeOg_U4 : component ip_sobel_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        din0 => ap_reg_pp0_iter1_p_read_4_reg_452,
        din1 => grp_fu_391_p1,
        din2 => grp_fu_262_p2,
        dout => grp_fu_391_p3);

    ip_sobel_mac_mulafYi_U5 : component ip_sobel_mac_mulafYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_399_p0,
        din1 => grp_fu_399_p1,
        din2 => tmp8_reg_557,
        dout => grp_fu_399_p3);

    ip_sobel_mac_mulag8j_U6 : component ip_sobel_mac_mulag8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => ap_reg_pp0_iter1_p_read_2_reg_442,
        din1 => grp_fu_407_p1,
        din2 => res_2_0_2_fu_353_p2,
        dout => grp_fu_407_p3);

    ip_sobel_mac_mulahbi_U7 : component ip_sobel_mac_mulahbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_415_p0,
        din1 => grp_fu_415_p1,
        din2 => tmp6_reg_572,
        dout => grp_fu_415_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then 
                reg_167 <= input_img_q1;
            elsif (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
                reg_167 <= input_img_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_port_reg_p_read <= p_read;
                ap_port_reg_p_read1 <= p_read1;
                ap_port_reg_p_read3 <= p_read3;
                ap_port_reg_p_read5 <= p_read5;
                ap_port_reg_p_read7 <= p_read7;
                ap_port_reg_p_read8 <= p_read8;
                ap_port_reg_posx <= posx;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1))) then
                ap_reg_pp0_iter1_p_read_2_reg_442 <= p_read_2_reg_442;
                ap_reg_pp0_iter1_p_read_3_reg_447 <= p_read_3_reg_447;
                ap_reg_pp0_iter1_p_read_4_reg_452 <= p_read_4_reg_452;
                ap_reg_pp0_iter1_p_read_5_reg_457 <= p_read_5_reg_457;
                p_read_1_reg_437 <= ap_port_reg_p_read8;
                p_read_2_reg_442 <= ap_port_reg_p_read7;
                p_read_3_reg_447 <= ap_port_reg_p_read5;
                p_read_4_reg_452 <= ap_port_reg_p_read3;
                p_read_5_reg_457 <= ap_port_reg_p_read1;
                p_read_6_reg_462 <= ap_port_reg_p_read;
                posx_read_reg_467 <= ap_port_reg_posx;
                tmp_33_reg_474 <= tmp_33_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                input_img_load_1_reg_492 <= input_img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                input_img_load_2_reg_507 <= input_img_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                input_img_load_3_reg_532 <= input_img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                res_2_0_1_reg_562 <= grp_fu_391_p3;
                tmp7_reg_567 <= grp_fu_399_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                tmp2_reg_502 <= tmp2_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                tmp6_reg_572 <= grp_fu_407_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                tmp8_reg_557 <= grp_fu_383_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                tmp_35_1_2_reg_537 <= tmp_35_1_2_fu_277_p2;
                tmp_reg_428 <= grp_fu_176_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage0_flag00011011, ap_idle_pp0_1to2, ap_block_pp0_stage1_flag00011011, ap_reset_idle_pp0, ap_reset_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_1to2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_reset_idle_pp0 = ap_const_logic_0) and not(((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_reset_start_pp0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif ((((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_reset_idle_pp0)) or ((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_reset_start_pp0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_ce)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_ce = ap_const_logic_0) or ((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)));
    end process;

        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage3_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_const_logic_0 = ap_start);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter2, ap_ce, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00011001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_0to1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_const_logic_1 = ap_idle_pp0_0to1) and (ap_const_logic_1 = ap_start))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(signed(grp_fu_415_p3) + signed(tmp7_cast_fu_375_p1));

    grp_fu_176_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))))) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_176_p0 <= grp_fu_176_p00(6 - 1 downto 0);
    grp_fu_176_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(posy),12));
    grp_fu_176_p1 <= ap_const_lv12_32(7 - 1 downto 0);

    grp_fu_262_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00011001, ap_ce, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0))))) then 
            grp_fu_262_ce <= ap_const_logic_1;
        else 
            grp_fu_262_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_262_p1 <= grp_fu_262_p10(8 - 1 downto 0);
    grp_fu_262_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_167),10));
    grp_fu_383_p1 <= grp_fu_383_p10(8 - 1 downto 0);
    grp_fu_383_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_167),10));
    grp_fu_383_p2 <= grp_fu_383_p20(8 - 1 downto 0);
    grp_fu_383_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_img_q0),10));
    grp_fu_391_p1 <= grp_fu_391_p10(8 - 1 downto 0);
    grp_fu_391_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_img_load_1_reg_492),10));
    grp_fu_399_p0 <= grp_fu_399_p00(3 - 1 downto 0);
    grp_fu_399_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_p_read_3_reg_447),11));
    grp_fu_399_p1 <= grp_fu_399_p10(8 - 1 downto 0);
    grp_fu_399_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_167),11));
    grp_fu_407_p1 <= grp_fu_407_p10(8 - 1 downto 0);
    grp_fu_407_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_167),11));
    grp_fu_415_p0 <= grp_fu_415_p00(4 - 1 downto 0);
    grp_fu_415_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_p_read_5_reg_457),12));
    grp_fu_415_p1 <= grp_fu_415_p10(8 - 1 downto 0);
    grp_fu_415_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_img_load_3_reg_532),12));

    input_img_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, tmp_36_0_1_fu_202_p1, ap_block_pp0_stage3_flag00000000, tmp_36_fu_212_p1, tmp_36_1_fu_240_p1, ap_block_pp0_stage1_flag00000000, tmp_36_2_fu_287_p1, ap_block_pp0_stage2_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
            input_img_address0 <= tmp_36_2_fu_287_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            input_img_address0 <= tmp_36_1_fu_240_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            input_img_address0 <= tmp_36_fu_212_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0))) then 
            input_img_address0 <= tmp_36_0_1_fu_202_p1(12 - 1 downto 0);
        else 
            input_img_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_img_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage3_flag00000000, tmp_36_0_2_fu_222_p1, ap_block_pp0_stage1_flag00000000, tmp_36_2_2_fu_250_p1, ap_block_pp0_stage2_flag00000000, tmp_36_2_1_fu_310_p1, tmp_36_1_2_fu_315_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0))) then 
                input_img_address1 <= tmp_36_1_2_fu_315_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
                input_img_address1 <= tmp_36_2_1_fu_310_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                input_img_address1 <= tmp_36_2_2_fu_250_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                input_img_address1 <= tmp_36_0_2_fu_222_p1(12 - 1 downto 0);
            else 
                input_img_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            input_img_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_img_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00011001, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then 
            input_img_ce0 <= ap_const_logic_1;
        else 
            input_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_img_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00011001, ap_ce, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage0_flag00011001)
    begin
        if ((((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then 
            input_img_ce1 <= ap_const_logic_1;
        else 
            input_img_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    posx_cast1_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_posx),12));
    posx_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(posx_read_reg_467),13));
    res_2_0_2_fu_353_p2 <= std_logic_vector(signed(res_2_0_1_reg_562) - signed(tmp_37_0_2_cast_fu_350_p1));
    tmp1_fu_191_p2 <= std_logic_vector(unsigned(tmp_reg_428) + unsigned(ap_const_lv12_FFF));
        tmp2_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_reg_502),12));

    tmp2_fu_227_p2 <= std_logic_vector(unsigned(posx_read_reg_467) + unsigned(ap_const_lv7_4E));
    tmp3_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_268_p2),12));
    tmp3_fu_268_p2 <= std_logic_vector(unsigned(posx_read_reg_467) + unsigned(ap_const_lv7_32));
    tmp49_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_292_p2),13));
    tmp4_fu_292_p2 <= (tmp_reg_428 or ap_const_lv12_1);
        tmp7_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_reg_567),12));

    tmp_33_fu_186_p2 <= std_logic_vector(unsigned(posx_cast1_fu_182_p1) + unsigned(tmp_reg_428));
    tmp_35_0_1_fu_196_p2 <= std_logic_vector(unsigned(posx_cast1_fu_182_p1) + unsigned(tmp1_fu_191_p2));
    tmp_35_0_2_fu_217_p2 <= std_logic_vector(unsigned(tmp_33_reg_474) + unsigned(ap_const_lv12_31));
    tmp_35_1_2_fu_277_p2 <= std_logic_vector(unsigned(tmp_reg_428) + unsigned(tmp3_cast_fu_273_p1));
    tmp_35_1_fu_235_p2 <= std_logic_vector(unsigned(tmp_reg_428) + unsigned(tmp2_cast_fu_232_p1));
    tmp_35_2_1_fu_304_p2 <= std_logic_vector(unsigned(posx_cast_fu_301_p1) + unsigned(tmp49_cast_fu_297_p1));
    tmp_35_2_2_fu_245_p2 <= std_logic_vector(unsigned(tmp_33_reg_474) + unsigned(ap_const_lv12_33));
    tmp_35_2_fu_282_p2 <= std_logic_vector(unsigned(tmp_33_reg_474) + unsigned(ap_const_lv12_FCF));
    tmp_35_fu_207_p2 <= std_logic_vector(unsigned(tmp_33_reg_474) + unsigned(ap_const_lv12_FCD));
    tmp_36_0_1_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_0_1_fu_196_p2),64));
    tmp_36_0_2_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_0_2_fu_217_p2),64));
    tmp_36_1_2_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_1_2_reg_537),64));
    tmp_36_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_1_fu_235_p2),64));
    tmp_36_2_1_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_2_1_fu_304_p2),64));
    tmp_36_2_2_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_2_2_fu_245_p2),64));
    tmp_36_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_2_fu_282_p2),64));
    tmp_36_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_207_p2),64));
    tmp_37_0_2_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_img_load_2_reg_507),11));
end behav;
