// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        posy,
        posx,
        input_img_address0,
        input_img_ce0,
        input_img_q0,
        input_img_address1,
        input_img_ce1,
        input_img_q1,
        p_read,
        p_read1,
        p_read3,
        p_read5,
        p_read7,
        p_read8,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [5:0] posy;
input  [6:0] posx;
output  [11:0] input_img_address0;
output   input_img_ce0;
input  [7:0] input_img_q0;
output  [11:0] input_img_address1;
output   input_img_ce1;
input  [7:0] input_img_q1;
input  [1:0] p_read;
input  [3:0] p_read1;
input  [1:0] p_read3;
input  [2:0] p_read5;
input  [2:0] p_read7;
input  [1:0] p_read8;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] input_img_address0;
reg input_img_ce0;
reg[11:0] input_img_address1;
reg input_img_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_flag00000000;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_flag00011001;
reg   [7:0] reg_167;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_flag00011001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_flag00011001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_flag00011001;
wire   [11:0] grp_fu_176_p2;
reg   [11:0] tmp_reg_428;
reg  signed [1:0] p_read_1_reg_437;
reg   [2:0] p_read_2_reg_442;
reg  signed [2:0] ap_reg_pp0_iter1_p_read_2_reg_442;
reg   [2:0] p_read_3_reg_447;
reg   [2:0] ap_reg_pp0_iter1_p_read_3_reg_447;
reg   [1:0] p_read_4_reg_452;
reg  signed [1:0] ap_reg_pp0_iter1_p_read_4_reg_452;
reg   [3:0] p_read_5_reg_457;
reg   [3:0] ap_reg_pp0_iter1_p_read_5_reg_457;
reg  signed [1:0] p_read_6_reg_462;
reg   [6:0] posx_read_reg_467;
wire   [11:0] tmp_33_fu_186_p2;
reg   [11:0] tmp_33_reg_474;
reg   [7:0] input_img_load_1_reg_492;
wire   [6:0] tmp2_fu_227_p2;
reg   [6:0] tmp2_reg_502;
reg   [7:0] input_img_load_2_reg_507;
reg   [7:0] input_img_load_3_reg_532;
wire   [11:0] tmp_35_1_2_fu_277_p2;
reg   [11:0] tmp_35_1_2_reg_537;
wire  signed [9:0] grp_fu_383_p3;
reg  signed [9:0] tmp8_reg_557;
wire  signed [10:0] grp_fu_391_p3;
reg  signed [10:0] res_2_0_1_reg_562;
wire  signed [10:0] grp_fu_399_p3;
reg  signed [10:0] tmp7_reg_567;
wire  signed [11:0] grp_fu_407_p3;
reg  signed [11:0] tmp6_reg_572;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage3_flag00011011;
reg    ap_block_pp0_stage2_flag00011011;
reg   [6:0] ap_port_reg_posx;
reg   [1:0] ap_port_reg_p_read;
reg   [3:0] ap_port_reg_p_read1;
reg   [1:0] ap_port_reg_p_read3;
reg   [2:0] ap_port_reg_p_read5;
reg   [2:0] ap_port_reg_p_read7;
reg   [1:0] ap_port_reg_p_read8;
wire   [63:0] tmp_36_0_1_fu_202_p1;
wire    ap_block_pp0_stage3_flag00000000;
wire   [63:0] tmp_36_fu_212_p1;
wire   [63:0] tmp_36_0_2_fu_222_p1;
wire   [63:0] tmp_36_1_fu_240_p1;
wire    ap_block_pp0_stage1_flag00000000;
wire   [63:0] tmp_36_2_2_fu_250_p1;
wire   [63:0] tmp_36_2_fu_287_p1;
wire    ap_block_pp0_stage2_flag00000000;
wire   [63:0] tmp_36_2_1_fu_310_p1;
wire   [63:0] tmp_36_1_2_fu_315_p1;
wire   [5:0] grp_fu_176_p0;
wire   [6:0] grp_fu_176_p1;
wire   [11:0] posx_cast1_fu_182_p1;
wire   [11:0] tmp1_fu_191_p2;
wire   [11:0] tmp_35_0_1_fu_196_p2;
wire   [11:0] tmp_35_fu_207_p2;
wire   [11:0] tmp_35_0_2_fu_217_p2;
wire  signed [11:0] tmp2_cast_fu_232_p1;
wire   [11:0] tmp_35_1_fu_235_p2;
wire   [11:0] tmp_35_2_2_fu_245_p2;
wire   [7:0] grp_fu_262_p1;
wire   [6:0] tmp3_fu_268_p2;
wire   [11:0] tmp3_cast_fu_273_p1;
wire   [11:0] tmp_35_2_fu_282_p2;
wire   [11:0] tmp4_fu_292_p2;
wire   [12:0] posx_cast_fu_301_p1;
wire   [12:0] tmp49_cast_fu_297_p1;
wire   [12:0] tmp_35_2_1_fu_304_p2;
wire  signed [9:0] grp_fu_262_p2;
wire   [10:0] tmp_37_0_2_cast_fu_350_p1;
(* use_dsp48 = "no" *) wire  signed [10:0] res_2_0_2_fu_353_p2;
wire  signed [11:0] grp_fu_415_p3;
wire  signed [11:0] tmp7_cast_fu_375_p1;
wire   [7:0] grp_fu_383_p1;
wire   [7:0] grp_fu_383_p2;
wire   [7:0] grp_fu_391_p1;
wire   [2:0] grp_fu_399_p0;
wire   [7:0] grp_fu_399_p1;
wire   [7:0] grp_fu_407_p1;
wire   [3:0] grp_fu_415_p0;
wire   [7:0] grp_fu_415_p1;
reg    grp_fu_176_ce;
reg    grp_fu_262_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0_stage1_flag00011011;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_176_p00;
wire   [9:0] grp_fu_262_p10;
wire   [9:0] grp_fu_383_p10;
wire   [9:0] grp_fu_383_p20;
wire   [9:0] grp_fu_391_p10;
wire   [10:0] grp_fu_399_p00;
wire   [10:0] grp_fu_399_p10;
wire   [10:0] grp_fu_407_p10;
wire   [11:0] grp_fu_415_p00;
wire   [11:0] grp_fu_415_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

ip_sobel_mul_6ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
ip_sobel_mul_6ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_176_p0),
    .din1(grp_fu_176_p1),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

ip_sobel_mul_2s_8cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
ip_sobel_mul_2s_8cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read_6_reg_462),
    .din1(grp_fu_262_p1),
    .ce(grp_fu_262_ce),
    .dout(grp_fu_262_p2)
);

ip_sobel_mac_muladEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
ip_sobel_mac_muladEe_U3(
    .din0(p_read_1_reg_437),
    .din1(grp_fu_383_p1),
    .din2(grp_fu_383_p2),
    .dout(grp_fu_383_p3)
);

ip_sobel_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 11 ))
ip_sobel_mac_mulaeOg_U4(
    .din0(ap_reg_pp0_iter1_p_read_4_reg_452),
    .din1(grp_fu_391_p1),
    .din2(grp_fu_262_p2),
    .dout(grp_fu_391_p3)
);

ip_sobel_mac_mulafYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 11 ))
ip_sobel_mac_mulafYi_U5(
    .din0(grp_fu_399_p0),
    .din1(grp_fu_399_p1),
    .din2(tmp8_reg_557),
    .dout(grp_fu_399_p3)
);

ip_sobel_mac_mulag8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
ip_sobel_mac_mulag8j_U6(
    .din0(ap_reg_pp0_iter1_p_read_2_reg_442),
    .din1(grp_fu_407_p1),
    .din2(res_2_0_2_fu_353_p2),
    .dout(grp_fu_407_p3)
);

ip_sobel_mac_mulahbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ip_sobel_mac_mulahbi_U7(
    .din0(grp_fu_415_p0),
    .din1(grp_fu_415_p1),
    .din2(tmp6_reg_572),
    .dout(grp_fu_415_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        reg_167 <= input_img_q1;
    end else if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        reg_167 <= input_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_ce == 1'b1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_port_reg_p_read <= p_read;
        ap_port_reg_p_read1 <= p_read1;
        ap_port_reg_p_read3 <= p_read3;
        ap_port_reg_p_read5 <= p_read5;
        ap_port_reg_p_read7 <= p_read7;
        ap_port_reg_p_read8 <= p_read8;
        ap_port_reg_posx <= posx;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (ap_ce == 1'b1))) begin
        ap_reg_pp0_iter1_p_read_2_reg_442 <= p_read_2_reg_442;
        ap_reg_pp0_iter1_p_read_3_reg_447 <= p_read_3_reg_447;
        ap_reg_pp0_iter1_p_read_4_reg_452 <= p_read_4_reg_452;
        ap_reg_pp0_iter1_p_read_5_reg_457 <= p_read_5_reg_457;
        p_read_1_reg_437 <= ap_port_reg_p_read8;
        p_read_2_reg_442 <= ap_port_reg_p_read7;
        p_read_3_reg_447 <= ap_port_reg_p_read5;
        p_read_4_reg_452 <= ap_port_reg_p_read3;
        p_read_5_reg_457 <= ap_port_reg_p_read1;
        p_read_6_reg_462 <= ap_port_reg_p_read;
        posx_read_reg_467 <= ap_port_reg_posx;
        tmp_33_reg_474 <= tmp_33_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        input_img_load_1_reg_492 <= input_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        input_img_load_2_reg_507 <= input_img_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        input_img_load_3_reg_532 <= input_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        res_2_0_1_reg_562 <= grp_fu_391_p3;
        tmp7_reg_567 <= grp_fu_399_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_ce == 1'b1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp2_reg_502 <= tmp2_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        tmp6_reg_572 <= grp_fu_407_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        tmp8_reg_557 <= grp_fu_383_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        tmp_35_1_2_reg_537 <= tmp_35_1_2_fu_277_p2;
        tmp_reg_428 <= grp_fu_176_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (ap_ce == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_idle_pp0_0to1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_idle_pp0_0to1) & (1'b1 == ap_start))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))))) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))))) begin
        grp_fu_262_ce = 1'b1;
    end else begin
        grp_fu_262_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        input_img_address0 = tmp_36_2_fu_287_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        input_img_address0 = tmp_36_1_fu_240_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        input_img_address0 = tmp_36_fu_212_p1;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0))) begin
        input_img_address0 = tmp_36_0_1_fu_202_p1;
    end else begin
        input_img_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0))) begin
            input_img_address1 = tmp_36_1_2_fu_315_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
            input_img_address1 = tmp_36_2_1_fu_310_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            input_img_address1 = tmp_36_2_2_fu_250_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            input_img_address1 = tmp_36_0_2_fu_222_p1;
        end else begin
            input_img_address1 = 'bx;
        end
    end else begin
        input_img_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (ap_ce == 1'b1)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        input_img_ce0 = 1'b1;
    end else begin
        input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        input_img_ce1 = 1'b1;
    end else begin
        input_img_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b0 == ap_start) & (1'b1 == ap_idle_pp0_1to2)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_block_pp0_stage2_flag00011011 == 1'b0) & (ap_reset_idle_pp0 == 1'b0) & ~((ap_block_pp0_stage2_flag00011011 == 1'b0) & (1'b1 == ap_reset_start_pp0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if ((((ap_block_pp0_stage2_flag00011011 == 1'b0) & (1'b1 == ap_reset_idle_pp0)) | ((ap_block_pp0_stage2_flag00011011 == 1'b0) & (1'b1 == ap_reset_start_pp0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((ap_ce == 1'b0) | ((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)));
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (1'b0 == ap_start);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = ($signed(grp_fu_415_p3) + $signed(tmp7_cast_fu_375_p1));

assign grp_fu_176_p0 = grp_fu_176_p00;

assign grp_fu_176_p00 = posy;

assign grp_fu_176_p1 = 12'd50;

assign grp_fu_262_p1 = grp_fu_262_p10;

assign grp_fu_262_p10 = reg_167;

assign grp_fu_383_p1 = grp_fu_383_p10;

assign grp_fu_383_p10 = reg_167;

assign grp_fu_383_p2 = grp_fu_383_p20;

assign grp_fu_383_p20 = input_img_q0;

assign grp_fu_391_p1 = grp_fu_391_p10;

assign grp_fu_391_p10 = input_img_load_1_reg_492;

assign grp_fu_399_p0 = grp_fu_399_p00;

assign grp_fu_399_p00 = ap_reg_pp0_iter1_p_read_3_reg_447;

assign grp_fu_399_p1 = grp_fu_399_p10;

assign grp_fu_399_p10 = reg_167;

assign grp_fu_407_p1 = grp_fu_407_p10;

assign grp_fu_407_p10 = reg_167;

assign grp_fu_415_p0 = grp_fu_415_p00;

assign grp_fu_415_p00 = ap_reg_pp0_iter1_p_read_5_reg_457;

assign grp_fu_415_p1 = grp_fu_415_p10;

assign grp_fu_415_p10 = input_img_load_3_reg_532;

assign posx_cast1_fu_182_p1 = ap_port_reg_posx;

assign posx_cast_fu_301_p1 = posx_read_reg_467;

assign res_2_0_2_fu_353_p2 = ($signed(res_2_0_1_reg_562) - $signed(tmp_37_0_2_cast_fu_350_p1));

assign tmp1_fu_191_p2 = ($signed(tmp_reg_428) + $signed(12'd4095));

assign tmp2_cast_fu_232_p1 = $signed(tmp2_reg_502);

assign tmp2_fu_227_p2 = ($signed(posx_read_reg_467) + $signed(7'd78));

assign tmp3_cast_fu_273_p1 = tmp3_fu_268_p2;

assign tmp3_fu_268_p2 = (posx_read_reg_467 + 7'd50);

assign tmp49_cast_fu_297_p1 = tmp4_fu_292_p2;

assign tmp4_fu_292_p2 = (tmp_reg_428 | 12'd1);

assign tmp7_cast_fu_375_p1 = tmp7_reg_567;

assign tmp_33_fu_186_p2 = (posx_cast1_fu_182_p1 + tmp_reg_428);

assign tmp_35_0_1_fu_196_p2 = (posx_cast1_fu_182_p1 + tmp1_fu_191_p2);

assign tmp_35_0_2_fu_217_p2 = (tmp_33_reg_474 + 12'd49);

assign tmp_35_1_2_fu_277_p2 = (tmp_reg_428 + tmp3_cast_fu_273_p1);

assign tmp_35_1_fu_235_p2 = ($signed(tmp_reg_428) + $signed(tmp2_cast_fu_232_p1));

assign tmp_35_2_1_fu_304_p2 = (posx_cast_fu_301_p1 + tmp49_cast_fu_297_p1);

assign tmp_35_2_2_fu_245_p2 = (tmp_33_reg_474 + 12'd51);

assign tmp_35_2_fu_282_p2 = ($signed(tmp_33_reg_474) + $signed(12'd4047));

assign tmp_35_fu_207_p2 = ($signed(tmp_33_reg_474) + $signed(12'd4045));

assign tmp_36_0_1_fu_202_p1 = tmp_35_0_1_fu_196_p2;

assign tmp_36_0_2_fu_222_p1 = tmp_35_0_2_fu_217_p2;

assign tmp_36_1_2_fu_315_p1 = tmp_35_1_2_reg_537;

assign tmp_36_1_fu_240_p1 = tmp_35_1_fu_235_p2;

assign tmp_36_2_1_fu_310_p1 = tmp_35_2_1_fu_304_p2;

assign tmp_36_2_2_fu_250_p1 = tmp_35_2_2_fu_245_p2;

assign tmp_36_2_fu_287_p1 = tmp_35_2_fu_282_p2;

assign tmp_36_fu_212_p1 = tmp_35_fu_207_p2;

assign tmp_37_0_2_cast_fu_350_p1 = input_img_load_2_reg_507;

endmodule //convolution2D
