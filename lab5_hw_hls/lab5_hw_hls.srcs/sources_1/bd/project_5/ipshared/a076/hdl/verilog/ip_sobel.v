// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ip_sobel,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.937250,HLS_SYN_LAT=8388627,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2045,HLS_SYN_LUT=3045}" *)

module ip_sobel (
        ap_clk,
        ap_rst_n,
        m_axi_input_img_AWVALID,
        m_axi_input_img_AWREADY,
        m_axi_input_img_AWADDR,
        m_axi_input_img_AWID,
        m_axi_input_img_AWLEN,
        m_axi_input_img_AWSIZE,
        m_axi_input_img_AWBURST,
        m_axi_input_img_AWLOCK,
        m_axi_input_img_AWCACHE,
        m_axi_input_img_AWPROT,
        m_axi_input_img_AWQOS,
        m_axi_input_img_AWREGION,
        m_axi_input_img_AWUSER,
        m_axi_input_img_WVALID,
        m_axi_input_img_WREADY,
        m_axi_input_img_WDATA,
        m_axi_input_img_WSTRB,
        m_axi_input_img_WLAST,
        m_axi_input_img_WID,
        m_axi_input_img_WUSER,
        m_axi_input_img_ARVALID,
        m_axi_input_img_ARREADY,
        m_axi_input_img_ARADDR,
        m_axi_input_img_ARID,
        m_axi_input_img_ARLEN,
        m_axi_input_img_ARSIZE,
        m_axi_input_img_ARBURST,
        m_axi_input_img_ARLOCK,
        m_axi_input_img_ARCACHE,
        m_axi_input_img_ARPROT,
        m_axi_input_img_ARQOS,
        m_axi_input_img_ARREGION,
        m_axi_input_img_ARUSER,
        m_axi_input_img_RVALID,
        m_axi_input_img_RREADY,
        m_axi_input_img_RDATA,
        m_axi_input_img_RLAST,
        m_axi_input_img_RID,
        m_axi_input_img_RUSER,
        m_axi_input_img_RRESP,
        m_axi_input_img_BVALID,
        m_axi_input_img_BREADY,
        m_axi_input_img_BRESP,
        m_axi_input_img_BID,
        m_axi_input_img_BUSER,
        m_axi_output_img_AWVALID,
        m_axi_output_img_AWREADY,
        m_axi_output_img_AWADDR,
        m_axi_output_img_AWID,
        m_axi_output_img_AWLEN,
        m_axi_output_img_AWSIZE,
        m_axi_output_img_AWBURST,
        m_axi_output_img_AWLOCK,
        m_axi_output_img_AWCACHE,
        m_axi_output_img_AWPROT,
        m_axi_output_img_AWQOS,
        m_axi_output_img_AWREGION,
        m_axi_output_img_AWUSER,
        m_axi_output_img_WVALID,
        m_axi_output_img_WREADY,
        m_axi_output_img_WDATA,
        m_axi_output_img_WSTRB,
        m_axi_output_img_WLAST,
        m_axi_output_img_WID,
        m_axi_output_img_WUSER,
        m_axi_output_img_ARVALID,
        m_axi_output_img_ARREADY,
        m_axi_output_img_ARADDR,
        m_axi_output_img_ARID,
        m_axi_output_img_ARLEN,
        m_axi_output_img_ARSIZE,
        m_axi_output_img_ARBURST,
        m_axi_output_img_ARLOCK,
        m_axi_output_img_ARCACHE,
        m_axi_output_img_ARPROT,
        m_axi_output_img_ARQOS,
        m_axi_output_img_ARREGION,
        m_axi_output_img_ARUSER,
        m_axi_output_img_RVALID,
        m_axi_output_img_RREADY,
        m_axi_output_img_RDATA,
        m_axi_output_img_RLAST,
        m_axi_output_img_RID,
        m_axi_output_img_RUSER,
        m_axi_output_img_RRESP,
        m_axi_output_img_BVALID,
        m_axi_output_img_BREADY,
        m_axi_output_img_BRESP,
        m_axi_output_img_BID,
        m_axi_output_img_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state28 = 10'd512;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_IMG_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMG_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_IMG_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_IMG_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMG_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMG_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMG_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMG_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMG_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_IMG_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_IMG_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_IMG_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_IMG_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_IMG_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_IMG_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_IMG_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_IMG_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_IMG_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_IMG_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_IMG_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_IMG_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_IMG_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_IMG_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_IMG_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_input_img_AWVALID;
input   m_axi_input_img_AWREADY;
output  [C_M_AXI_INPUT_IMG_ADDR_WIDTH - 1:0] m_axi_input_img_AWADDR;
output  [C_M_AXI_INPUT_IMG_ID_WIDTH - 1:0] m_axi_input_img_AWID;
output  [7:0] m_axi_input_img_AWLEN;
output  [2:0] m_axi_input_img_AWSIZE;
output  [1:0] m_axi_input_img_AWBURST;
output  [1:0] m_axi_input_img_AWLOCK;
output  [3:0] m_axi_input_img_AWCACHE;
output  [2:0] m_axi_input_img_AWPROT;
output  [3:0] m_axi_input_img_AWQOS;
output  [3:0] m_axi_input_img_AWREGION;
output  [C_M_AXI_INPUT_IMG_AWUSER_WIDTH - 1:0] m_axi_input_img_AWUSER;
output   m_axi_input_img_WVALID;
input   m_axi_input_img_WREADY;
output  [C_M_AXI_INPUT_IMG_DATA_WIDTH - 1:0] m_axi_input_img_WDATA;
output  [C_M_AXI_INPUT_IMG_WSTRB_WIDTH - 1:0] m_axi_input_img_WSTRB;
output   m_axi_input_img_WLAST;
output  [C_M_AXI_INPUT_IMG_ID_WIDTH - 1:0] m_axi_input_img_WID;
output  [C_M_AXI_INPUT_IMG_WUSER_WIDTH - 1:0] m_axi_input_img_WUSER;
output   m_axi_input_img_ARVALID;
input   m_axi_input_img_ARREADY;
output  [C_M_AXI_INPUT_IMG_ADDR_WIDTH - 1:0] m_axi_input_img_ARADDR;
output  [C_M_AXI_INPUT_IMG_ID_WIDTH - 1:0] m_axi_input_img_ARID;
output  [7:0] m_axi_input_img_ARLEN;
output  [2:0] m_axi_input_img_ARSIZE;
output  [1:0] m_axi_input_img_ARBURST;
output  [1:0] m_axi_input_img_ARLOCK;
output  [3:0] m_axi_input_img_ARCACHE;
output  [2:0] m_axi_input_img_ARPROT;
output  [3:0] m_axi_input_img_ARQOS;
output  [3:0] m_axi_input_img_ARREGION;
output  [C_M_AXI_INPUT_IMG_ARUSER_WIDTH - 1:0] m_axi_input_img_ARUSER;
input   m_axi_input_img_RVALID;
output   m_axi_input_img_RREADY;
input  [C_M_AXI_INPUT_IMG_DATA_WIDTH - 1:0] m_axi_input_img_RDATA;
input   m_axi_input_img_RLAST;
input  [C_M_AXI_INPUT_IMG_ID_WIDTH - 1:0] m_axi_input_img_RID;
input  [C_M_AXI_INPUT_IMG_RUSER_WIDTH - 1:0] m_axi_input_img_RUSER;
input  [1:0] m_axi_input_img_RRESP;
input   m_axi_input_img_BVALID;
output   m_axi_input_img_BREADY;
input  [1:0] m_axi_input_img_BRESP;
input  [C_M_AXI_INPUT_IMG_ID_WIDTH - 1:0] m_axi_input_img_BID;
input  [C_M_AXI_INPUT_IMG_BUSER_WIDTH - 1:0] m_axi_input_img_BUSER;
output   m_axi_output_img_AWVALID;
input   m_axi_output_img_AWREADY;
output  [C_M_AXI_OUTPUT_IMG_ADDR_WIDTH - 1:0] m_axi_output_img_AWADDR;
output  [C_M_AXI_OUTPUT_IMG_ID_WIDTH - 1:0] m_axi_output_img_AWID;
output  [7:0] m_axi_output_img_AWLEN;
output  [2:0] m_axi_output_img_AWSIZE;
output  [1:0] m_axi_output_img_AWBURST;
output  [1:0] m_axi_output_img_AWLOCK;
output  [3:0] m_axi_output_img_AWCACHE;
output  [2:0] m_axi_output_img_AWPROT;
output  [3:0] m_axi_output_img_AWQOS;
output  [3:0] m_axi_output_img_AWREGION;
output  [C_M_AXI_OUTPUT_IMG_AWUSER_WIDTH - 1:0] m_axi_output_img_AWUSER;
output   m_axi_output_img_WVALID;
input   m_axi_output_img_WREADY;
output  [C_M_AXI_OUTPUT_IMG_DATA_WIDTH - 1:0] m_axi_output_img_WDATA;
output  [C_M_AXI_OUTPUT_IMG_WSTRB_WIDTH - 1:0] m_axi_output_img_WSTRB;
output   m_axi_output_img_WLAST;
output  [C_M_AXI_OUTPUT_IMG_ID_WIDTH - 1:0] m_axi_output_img_WID;
output  [C_M_AXI_OUTPUT_IMG_WUSER_WIDTH - 1:0] m_axi_output_img_WUSER;
output   m_axi_output_img_ARVALID;
input   m_axi_output_img_ARREADY;
output  [C_M_AXI_OUTPUT_IMG_ADDR_WIDTH - 1:0] m_axi_output_img_ARADDR;
output  [C_M_AXI_OUTPUT_IMG_ID_WIDTH - 1:0] m_axi_output_img_ARID;
output  [7:0] m_axi_output_img_ARLEN;
output  [2:0] m_axi_output_img_ARSIZE;
output  [1:0] m_axi_output_img_ARBURST;
output  [1:0] m_axi_output_img_ARLOCK;
output  [3:0] m_axi_output_img_ARCACHE;
output  [2:0] m_axi_output_img_ARPROT;
output  [3:0] m_axi_output_img_ARQOS;
output  [3:0] m_axi_output_img_ARREGION;
output  [C_M_AXI_OUTPUT_IMG_ARUSER_WIDTH - 1:0] m_axi_output_img_ARUSER;
input   m_axi_output_img_RVALID;
output   m_axi_output_img_RREADY;
input  [C_M_AXI_OUTPUT_IMG_DATA_WIDTH - 1:0] m_axi_output_img_RDATA;
input   m_axi_output_img_RLAST;
input  [C_M_AXI_OUTPUT_IMG_ID_WIDTH - 1:0] m_axi_output_img_RID;
input  [C_M_AXI_OUTPUT_IMG_RUSER_WIDTH - 1:0] m_axi_output_img_RUSER;
input  [1:0] m_axi_output_img_RRESP;
input   m_axi_output_img_BVALID;
output   m_axi_output_img_BREADY;
input  [1:0] m_axi_output_img_BRESP;
input  [C_M_AXI_OUTPUT_IMG_ID_WIDTH - 1:0] m_axi_output_img_BID;
input  [C_M_AXI_OUTPUT_IMG_BUSER_WIDTH - 1:0] m_axi_output_img_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_img_offset;
wire   [31:0] output_img_offset;
reg    input_img_blk_n_AR;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage3_flag00000000;
reg   [0:0] exitcond_flatten_reg_843;
reg   [0:0] or_cond5_reg_871;
reg    input_img_blk_n_R;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_flag00000000;
reg   [0:0] ap_reg_pp0_iter1_or_cond5_reg_871;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_flag00000000;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_flag00000000;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6_flag00000000;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_flag00000000;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_flag00000000;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_flag00000000;
reg    ap_enable_reg_pp0_iter2;
reg    output_img_blk_n_AW;
reg   [0:0] ap_reg_pp0_iter2_or_cond5_reg_871;
reg    output_img_blk_n_W;
reg    output_img_blk_n_B;
reg    ap_enable_reg_pp0_iter3;
wire    input_img_AWREADY;
wire    input_img_WREADY;
reg    input_img_ARVALID;
wire    input_img_ARREADY;
reg   [31:0] input_img_ARADDR;
wire    input_img_RVALID;
reg    input_img_RREADY;
wire   [7:0] input_img_RDATA;
wire    input_img_RLAST;
wire   [0:0] input_img_RID;
wire   [0:0] input_img_RUSER;
wire   [1:0] input_img_RRESP;
wire    input_img_BVALID;
wire   [1:0] input_img_BRESP;
wire   [0:0] input_img_BID;
wire   [0:0] input_img_BUSER;
reg    output_img_AWVALID;
wire    output_img_AWREADY;
reg    output_img_WVALID;
wire    output_img_WREADY;
wire    output_img_ARREADY;
wire    output_img_RVALID;
wire   [7:0] output_img_RDATA;
wire    output_img_RLAST;
wire   [0:0] output_img_RID;
wire   [0:0] output_img_RUSER;
wire   [1:0] output_img_RRESP;
wire    output_img_BVALID;
reg    output_img_BREADY;
wire   [1:0] output_img_BRESP;
wire   [0:0] output_img_BID;
wire   [0:0] output_img_BUSER;
reg   [20:0] indvar_flatten_reg_145;
reg   [10:0] i_reg_156;
reg   [10:0] j_reg_168;
reg   [7:0] reg_180;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state12_pp0_stage2_iter1;
reg    ap_sig_ioackin_input_img_ARREADY;
reg    ap_block_state12_io;
wire    ap_block_state20_pp0_stage2_iter2;
reg    ap_block_pp0_stage2_flag00011001;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_state10_io;
reg    ap_block_state18_pp0_stage0_iter2;
wire    ap_block_state26_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_flag00011001;
reg   [7:0] reg_184;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_predicate_op130_readreq_state5;
reg    ap_block_state5_io;
reg    ap_block_state13_pp0_stage3_iter1;
wire    ap_block_state21_pp0_stage3_iter2;
reg    ap_sig_ioackin_output_img_AWREADY;
reg    ap_block_state21_io;
reg    ap_block_pp0_stage3_flag00011001;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state11_pp0_stage1_iter1;
reg    ap_block_state11_io;
reg    ap_block_state19_pp0_stage1_iter2;
reg    ap_block_state27_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_flag00011001;
wire  signed [32:0] tmp_2_cast_fu_188_p1;
reg  signed [32:0] tmp_2_cast_reg_817;
wire  signed [33:0] tmp_3_cast1_fu_192_p1;
reg  signed [33:0] tmp_3_cast1_reg_822;
wire  signed [32:0] tmp_3_cast_fu_196_p1;
reg  signed [32:0] tmp_3_cast_reg_827;
wire   [0:0] tmp1_fu_212_p2;
reg   [0:0] tmp1_reg_838;
wire   [0:0] exitcond_flatten_fu_218_p2;
wire   [20:0] indvar_flatten_next_fu_224_p2;
reg   [20:0] indvar_flatten_next_reg_847;
wire   [0:0] exitcond_fu_230_p2;
reg   [0:0] exitcond_reg_852;
wire   [10:0] tmp_s_fu_236_p2;
reg   [10:0] tmp_s_reg_861;
wire   [10:0] tmp_2_mid2_v_v_fu_267_p3;
reg   [10:0] tmp_2_mid2_v_v_reg_866;
wire   [0:0] or_cond5_fu_391_p2;
wire   [19:0] tmp_101_cast_fu_407_p2;
reg   [19:0] tmp_101_cast_reg_875;
reg   [31:0] input_img_addr_1_reg_881;
wire   [19:0] tmp_10_1_fu_432_p2;
reg   [19:0] tmp_10_1_reg_887;
wire   [20:0] tmp_10_2_fu_438_p2;
reg   [20:0] tmp_10_2_reg_894;
wire   [19:0] tmp_10_2_cast4_fu_444_p2;
reg   [19:0] tmp_10_2_cast4_reg_899;
wire   [10:0] j_1_fu_450_p2;
reg   [10:0] j_1_reg_905;
reg   [31:0] input_img_addr_reg_910;
reg   [31:0] input_img_addr_2_reg_916;
reg   [31:0] input_img_addr_3_reg_922;
reg   [31:0] input_img_addr_4_reg_928;
reg   [31:0] input_img_addr_5_reg_934;
reg   [31:0] input_img_addr_6_reg_940;
reg   [31:0] input_img_addr_7_reg_946;
reg   [31:0] output_img_addr_reg_952;
reg   [31:0] ap_reg_pp0_iter1_output_img_addr_reg_952;
reg   [31:0] ap_reg_pp0_iter2_output_img_addr_reg_952;
reg   [7:0] input_img_addr_2_rea_reg_957;
wire    ap_block_state6_pp0_stage4_iter0;
reg    ap_predicate_op132_readreq_state6;
reg    ap_block_state6_io;
reg    ap_block_state14_pp0_stage4_iter1;
wire    ap_block_state22_pp0_stage4_iter2;
reg    ap_sig_ioackin_output_img_WREADY;
reg    ap_block_state22_io;
reg    ap_block_pp0_stage4_flag00011001;
reg   [7:0] input_img_addr_3_rea_reg_962;
wire    ap_block_state7_pp0_stage5_iter0;
reg    ap_predicate_op135_readreq_state7;
reg    ap_block_state7_io;
reg    ap_block_state15_pp0_stage5_iter1;
wire    ap_block_state23_pp0_stage5_iter2;
reg    ap_block_pp0_stage5_flag00011001;
reg   [7:0] input_img_addr_4_rea_reg_967;
wire    ap_block_state8_pp0_stage6_iter0;
reg    ap_predicate_op139_readreq_state8;
reg    ap_block_state8_io;
reg    ap_block_state16_pp0_stage6_iter1;
wire    ap_block_state24_pp0_stage6_iter2;
reg    ap_block_pp0_stage6_flag00011001;
reg   [7:0] input_img_addr_5_rea_reg_972;
wire    ap_block_state9_pp0_stage7_iter0;
reg    ap_predicate_op144_readreq_state9;
reg    ap_block_state9_io;
reg    ap_block_state17_pp0_stage7_iter1;
wire    ap_block_state25_pp0_stage7_iter2;
reg    ap_block_pp0_stage7_flag00011001;
wire   [8:0] x_dir_2_0_2_fu_643_p2;
reg   [8:0] x_dir_2_0_2_reg_977;
wire   [8:0] tmp3_fu_649_p2;
reg   [8:0] tmp3_reg_982;
wire   [10:0] x_dir_2_2_fu_720_p2;
reg   [10:0] x_dir_2_2_reg_987;
wire   [10:0] y_dir_2_2_fu_726_p2;
reg   [10:0] y_dir_2_2_reg_992;
wire   [7:0] tmp_18_fu_732_p1;
reg   [7:0] tmp_18_reg_997;
wire   [7:0] tmp_12_fu_768_p2;
reg   [7:0] tmp_12_reg_1002;
wire   [0:0] abscond_fu_773_p2;
reg   [0:0] abscond_reg_1008;
wire   [7:0] tmp_19_fu_779_p1;
reg   [7:0] tmp_19_reg_1013;
wire   [0:0] abscond7_fu_783_p2;
reg   [0:0] abscond7_reg_1019;
wire   [7:0] tmp_6_fu_811_p2;
reg   [7:0] tmp_6_reg_1024;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage7_flag00011011;
reg    ap_block_pp0_stage1_flag00011011;
reg   [20:0] indvar_flatten_phi_fu_149_p4;
reg   [10:0] i_phi_fu_160_p4;
reg   [10:0] j_phi_fu_172_p4;
wire  signed [63:0] input_img2_sum5_cast_fu_422_p1;
wire  signed [63:0] input_img2_sum_cast_fu_470_p1;
wire  signed [63:0] input_img2_sum6_cast_fu_494_p1;
wire  signed [63:0] input_img2_sum7_cast_fu_518_p1;
wire  signed [63:0] input_img2_sum8_cast_fu_542_p1;
wire  signed [63:0] input_img2_sum9_cast_fu_566_p1;
wire  signed [63:0] input_img2_sum1_cast_fu_584_p1;
wire  signed [63:0] input_img2_sum2_cast_fu_608_p1;
wire  signed [63:0] output_img4_sum_cast_fu_626_p1;
reg    ap_reg_ioackin_input_img_ARREADY;
reg    ap_block_pp0_stage3_flag00001001;
reg    ap_block_pp0_stage4_flag00001001;
reg    ap_block_pp0_stage5_flag00001001;
reg    ap_block_pp0_stage6_flag00001001;
reg    ap_block_pp0_stage7_flag00001001;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_block_pp0_stage1_flag00001001;
reg    ap_block_pp0_stage2_flag00001001;
reg    ap_reg_ioackin_output_img_AWREADY;
reg    ap_reg_ioackin_output_img_WREADY;
wire   [0:0] tmp_fu_200_p2;
wire   [0:0] tmp_1_fu_206_p2;
wire   [10:0] i_s_fu_249_p2;
wire   [9:0] tmp_2_fu_274_p1;
wire   [10:0] tmp_mid2_v_v_v_fu_286_p3;
wire   [20:0] tmp_3_fu_292_p3;
wire   [10:0] tmp_95_2_mid1_fu_304_p2;
wire   [10:0] tmp_7_fu_310_p3;
wire   [0:0] tmp_mid1_fu_255_p2;
wire   [0:0] tmp_1_mid1_fu_261_p2;
wire   [0:0] tmp1_mid1_fu_325_p2;
wire   [9:0] tmp_8_fu_337_p1;
wire   [9:0] tmp_10_fu_349_p1;
wire   [10:0] j_mid2_fu_242_p3;
wire   [0:0] tmp_4_fu_373_p2;
wire   [0:0] tmp_5_fu_379_p2;
wire   [0:0] tmp2_fu_385_p2;
wire   [0:0] tmp1_mid2_fu_331_p3;
wire   [21:0] j_cast5_cast_fu_369_p1;
wire  signed [21:0] tmp_mid2_cast_fu_300_p1;
wire   [21:0] tmp_11_fu_397_p2;
wire   [19:0] tmp_20_mid2_fu_341_p3;
wire   [19:0] j_cast6_fu_365_p1;
wire  signed [31:0] tmp_21_cast_fu_403_p1;
wire   [33:0] tmp_12_0_1_cast_fu_413_p1;
wire   [33:0] input_img2_sum5_fu_417_p2;
wire   [19:0] tmp_2_mid2_fu_278_p3;
wire   [20:0] j_cast7_fu_361_p1;
wire   [20:0] tmp_2_mid2_3_fu_317_p3;
wire   [19:0] tmp_25_mid2_fu_353_p3;
wire   [19:0] tmp_15_fu_456_p2;
wire   [32:0] tmp_23_cast_fu_461_p1;
wire   [32:0] input_img2_sum_fu_465_p2;
wire   [19:0] tmp_11_0_2_fu_480_p2;
wire   [32:0] tmp_12_0_2_cast_fu_485_p1;
wire   [32:0] input_img2_sum6_fu_489_p2;
wire   [19:0] tmp_11_1_fu_504_p2;
wire   [32:0] tmp_12_1_cast_fu_509_p1;
wire   [32:0] input_img2_sum7_fu_513_p2;
wire   [19:0] tmp_11_1_2_fu_528_p2;
wire   [32:0] tmp_12_1_2_cast_fu_533_p1;
wire   [32:0] input_img2_sum8_fu_537_p2;
wire   [19:0] tmp_11_2_fu_552_p2;
wire   [32:0] tmp_12_2_cast_fu_557_p1;
wire   [32:0] input_img2_sum9_fu_561_p2;
wire   [32:0] tmp_12_2_1_cast_fu_576_p1;
wire   [32:0] input_img2_sum1_fu_579_p2;
wire   [19:0] tmp_11_2_2_fu_594_p2;
wire   [32:0] tmp_12_2_2_cast_fu_599_p1;
wire   [32:0] input_img2_sum2_fu_603_p2;
wire   [32:0] tmp_8_cast_fu_618_p1;
wire   [32:0] output_img4_sum_fu_621_p2;
wire   [8:0] tmp_13_0_2_cast_fu_640_p1;
wire   [8:0] tmp_131_cast_fu_636_p1;
wire   [8:0] tmp_16_0_1_fu_655_p3;
wire   [8:0] p_shl1_fu_670_p3;
wire  signed [10:0] x_dir_2_0_2_cast_fu_667_p1;
wire   [10:0] p_shl1_cast_fu_677_p1;
wire   [8:0] tmp_15_1_2_fu_687_p3;
wire   [10:0] x_dir_2_1_1_fu_681_p2;
wire   [10:0] tmp_15_1_2_cast_fu_694_p1;
wire   [9:0] tmp3_cast_fu_704_p1;
wire   [9:0] tmp_16_0_1_cast_fu_663_p1;
wire   [9:0] y_dir_2_1_2_fu_707_p2;
wire   [10:0] x_dir_2_1_2_fu_698_p2;
wire   [10:0] tmp_13_2_cast_fu_717_p1;
wire   [10:0] y_dir_2_1_2_cast_fu_713_p1;
wire   [8:0] p_shl_fu_736_p3;
wire   [10:0] p_shl_cast_fu_744_p1;
wire   [10:0] tmp_13_2_2_cast_fu_753_p1;
wire   [10:0] y_dir_2_2_1_fu_748_p2;
wire   [10:0] x_dir_2_2_2_fu_757_p2;
wire   [10:0] y_dir_2_2_2_fu_762_p2;
wire   [7:0] tmp_13_fu_789_p2;
wire   [7:0] tmp_16_fu_800_p2;
wire   [7:0] tmp_14_fu_794_p3;
wire   [7:0] tmp_17_fu_805_p3;
wire    ap_CS_fsm_state28;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp0_stage2_flag00011011;
reg    ap_block_pp0_stage3_flag00011011;
reg    ap_block_pp0_stage4_flag00011011;
reg    ap_block_pp0_stage5_flag00011011;
reg    ap_block_pp0_stage6_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1364;
reg    ap_condition_1368;
reg    ap_condition_784;
reg    ap_condition_798;
reg    ap_condition_810;
reg    ap_condition_822;
reg    ap_condition_834;
reg    ap_condition_846;
reg    ap_condition_858;
reg    ap_condition_870;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_reg_ioackin_input_img_ARREADY = 1'b0;
#0 ap_reg_ioackin_output_img_AWREADY = 1'b0;
#0 ap_reg_ioackin_output_img_WREADY = 1'b0;
end

ip_sobel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ip_sobel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_img_offset(input_img_offset),
    .output_img_offset(output_img_offset)
);

ip_sobel_input_img_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_IMG_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_IMG_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_IMG_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_IMG_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_IMG_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_IMG_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_IMG_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_IMG_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_IMG_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_IMG_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_IMG_CACHE_VALUE ))
ip_sobel_input_img_m_axi_U(
    .AWVALID(m_axi_input_img_AWVALID),
    .AWREADY(m_axi_input_img_AWREADY),
    .AWADDR(m_axi_input_img_AWADDR),
    .AWID(m_axi_input_img_AWID),
    .AWLEN(m_axi_input_img_AWLEN),
    .AWSIZE(m_axi_input_img_AWSIZE),
    .AWBURST(m_axi_input_img_AWBURST),
    .AWLOCK(m_axi_input_img_AWLOCK),
    .AWCACHE(m_axi_input_img_AWCACHE),
    .AWPROT(m_axi_input_img_AWPROT),
    .AWQOS(m_axi_input_img_AWQOS),
    .AWREGION(m_axi_input_img_AWREGION),
    .AWUSER(m_axi_input_img_AWUSER),
    .WVALID(m_axi_input_img_WVALID),
    .WREADY(m_axi_input_img_WREADY),
    .WDATA(m_axi_input_img_WDATA),
    .WSTRB(m_axi_input_img_WSTRB),
    .WLAST(m_axi_input_img_WLAST),
    .WID(m_axi_input_img_WID),
    .WUSER(m_axi_input_img_WUSER),
    .ARVALID(m_axi_input_img_ARVALID),
    .ARREADY(m_axi_input_img_ARREADY),
    .ARADDR(m_axi_input_img_ARADDR),
    .ARID(m_axi_input_img_ARID),
    .ARLEN(m_axi_input_img_ARLEN),
    .ARSIZE(m_axi_input_img_ARSIZE),
    .ARBURST(m_axi_input_img_ARBURST),
    .ARLOCK(m_axi_input_img_ARLOCK),
    .ARCACHE(m_axi_input_img_ARCACHE),
    .ARPROT(m_axi_input_img_ARPROT),
    .ARQOS(m_axi_input_img_ARQOS),
    .ARREGION(m_axi_input_img_ARREGION),
    .ARUSER(m_axi_input_img_ARUSER),
    .RVALID(m_axi_input_img_RVALID),
    .RREADY(m_axi_input_img_RREADY),
    .RDATA(m_axi_input_img_RDATA),
    .RLAST(m_axi_input_img_RLAST),
    .RID(m_axi_input_img_RID),
    .RUSER(m_axi_input_img_RUSER),
    .RRESP(m_axi_input_img_RRESP),
    .BVALID(m_axi_input_img_BVALID),
    .BREADY(m_axi_input_img_BREADY),
    .BRESP(m_axi_input_img_BRESP),
    .BID(m_axi_input_img_BID),
    .BUSER(m_axi_input_img_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(input_img_ARVALID),
    .I_ARREADY(input_img_ARREADY),
    .I_ARADDR(input_img_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(input_img_RVALID),
    .I_RREADY(input_img_RREADY),
    .I_RDATA(input_img_RDATA),
    .I_RID(input_img_RID),
    .I_RUSER(input_img_RUSER),
    .I_RRESP(input_img_RRESP),
    .I_RLAST(input_img_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(input_img_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(input_img_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(input_img_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(input_img_BRESP),
    .I_BID(input_img_BID),
    .I_BUSER(input_img_BUSER)
);

ip_sobel_output_img_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_IMG_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_IMG_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_IMG_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_IMG_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_IMG_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_IMG_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_IMG_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_IMG_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_IMG_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_IMG_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_IMG_CACHE_VALUE ))
ip_sobel_output_img_m_axi_U(
    .AWVALID(m_axi_output_img_AWVALID),
    .AWREADY(m_axi_output_img_AWREADY),
    .AWADDR(m_axi_output_img_AWADDR),
    .AWID(m_axi_output_img_AWID),
    .AWLEN(m_axi_output_img_AWLEN),
    .AWSIZE(m_axi_output_img_AWSIZE),
    .AWBURST(m_axi_output_img_AWBURST),
    .AWLOCK(m_axi_output_img_AWLOCK),
    .AWCACHE(m_axi_output_img_AWCACHE),
    .AWPROT(m_axi_output_img_AWPROT),
    .AWQOS(m_axi_output_img_AWQOS),
    .AWREGION(m_axi_output_img_AWREGION),
    .AWUSER(m_axi_output_img_AWUSER),
    .WVALID(m_axi_output_img_WVALID),
    .WREADY(m_axi_output_img_WREADY),
    .WDATA(m_axi_output_img_WDATA),
    .WSTRB(m_axi_output_img_WSTRB),
    .WLAST(m_axi_output_img_WLAST),
    .WID(m_axi_output_img_WID),
    .WUSER(m_axi_output_img_WUSER),
    .ARVALID(m_axi_output_img_ARVALID),
    .ARREADY(m_axi_output_img_ARREADY),
    .ARADDR(m_axi_output_img_ARADDR),
    .ARID(m_axi_output_img_ARID),
    .ARLEN(m_axi_output_img_ARLEN),
    .ARSIZE(m_axi_output_img_ARSIZE),
    .ARBURST(m_axi_output_img_ARBURST),
    .ARLOCK(m_axi_output_img_ARLOCK),
    .ARCACHE(m_axi_output_img_ARCACHE),
    .ARPROT(m_axi_output_img_ARPROT),
    .ARQOS(m_axi_output_img_ARQOS),
    .ARREGION(m_axi_output_img_ARREGION),
    .ARUSER(m_axi_output_img_ARUSER),
    .RVALID(m_axi_output_img_RVALID),
    .RREADY(m_axi_output_img_RREADY),
    .RDATA(m_axi_output_img_RDATA),
    .RLAST(m_axi_output_img_RLAST),
    .RID(m_axi_output_img_RID),
    .RUSER(m_axi_output_img_RUSER),
    .RRESP(m_axi_output_img_RRESP),
    .BVALID(m_axi_output_img_BVALID),
    .BREADY(m_axi_output_img_BREADY),
    .BRESP(m_axi_output_img_BRESP),
    .BID(m_axi_output_img_BID),
    .BUSER(m_axi_output_img_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(output_img_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(output_img_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(output_img_RDATA),
    .I_RID(output_img_RID),
    .I_RUSER(output_img_RUSER),
    .I_RRESP(output_img_RRESP),
    .I_RLAST(output_img_RLAST),
    .I_AWVALID(output_img_AWVALID),
    .I_AWREADY(output_img_AWREADY),
    .I_AWADDR(ap_reg_pp0_iter2_output_img_addr_reg_952),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(output_img_WVALID),
    .I_WREADY(output_img_WREADY),
    .I_WDATA(tmp_6_reg_1024),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(output_img_BVALID),
    .I_BREADY(output_img_BREADY),
    .I_BRESP(output_img_BRESP),
    .I_BID(output_img_BID),
    .I_BUSER(output_img_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_input_img_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op130_readreq_state5) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_predicate_op132_readreq_state6) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_predicate_op135_readreq_state7) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == ap_predicate_op139_readreq_state8) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == ap_predicate_op144_readreq_state9) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_input_img_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op130_readreq_state5) & (1'b1 == input_img_ARREADY) & (ap_block_pp0_stage3_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_predicate_op132_readreq_state6) & (1'b1 == input_img_ARREADY) & (ap_block_pp0_stage4_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_predicate_op135_readreq_state7) & (1'b1 == input_img_ARREADY) & (ap_block_pp0_stage5_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == ap_predicate_op139_readreq_state8) & (1'b1 == input_img_ARREADY) & (ap_block_pp0_stage6_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == ap_predicate_op144_readreq_state9) & (1'b1 == input_img_ARREADY) & (ap_block_pp0_stage7_flag00001001 == 1'b0)) | ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == input_img_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0)) | ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == input_img_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == input_img_ARREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_input_img_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_output_img_AWREADY <= 1'b0;
    end else begin
        if ((ap_condition_1364 == 1'b1)) begin
            if ((ap_block_pp0_stage3_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_output_img_AWREADY <= 1'b0;
            end else if (((ap_block_pp0_stage3_flag00001001 == 1'b0) & (1'b1 == output_img_AWREADY))) begin
                ap_reg_ioackin_output_img_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_output_img_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_1368 == 1'b1)) begin
            if ((ap_block_pp0_stage4_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_output_img_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage4_flag00001001 == 1'b0) & (1'b1 == output_img_WREADY))) begin
                ap_reg_ioackin_output_img_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_843 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_reg_156 <= tmp_2_mid2_v_v_reg_866;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_156 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_843 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_reg_145 <= indvar_flatten_next_reg_847;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_145 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_843 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        j_reg_168 <= j_1_reg_905;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_168 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        abscond7_reg_1019 <= abscond7_fu_783_p2;
        abscond_reg_1008 <= abscond_fu_773_p2;
        tmp_12_reg_1002 <= tmp_12_fu_768_p2;
        tmp_19_reg_1013 <= tmp_19_fu_779_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_or_cond5_reg_871 <= or_cond5_reg_871;
        ap_reg_pp0_iter2_or_cond5_reg_871 <= ap_reg_pp0_iter1_or_cond5_reg_871;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_output_img_addr_reg_952 <= output_img_addr_reg_952;
        ap_reg_pp0_iter2_output_img_addr_reg_952 <= ap_reg_pp0_iter1_output_img_addr_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_flatten_reg_843 <= exitcond_flatten_fu_218_p2;
        tmp1_reg_838 <= tmp1_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_218_p2))) begin
        exitcond_reg_852 <= exitcond_fu_230_p2;
        tmp_s_reg_861 <= tmp_s_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_next_reg_847 <= indvar_flatten_next_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_843 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd1 == or_cond5_fu_391_p2))) begin
        input_img_addr_1_reg_881 <= input_img2_sum5_cast_fu_422_p1;
        tmp_101_cast_reg_875 <= tmp_101_cast_fu_407_p2;
        tmp_10_1_reg_887 <= tmp_10_1_fu_432_p2;
        tmp_10_2_cast4_reg_899 <= tmp_10_2_cast4_fu_444_p2;
        tmp_10_2_reg_894 <= tmp_10_2_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        input_img_addr_2_rea_reg_957 <= input_img_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        input_img_addr_2_reg_916 <= input_img2_sum6_cast_fu_494_p1;
        input_img_addr_3_reg_922 <= input_img2_sum7_cast_fu_518_p1;
        input_img_addr_4_reg_928 <= input_img2_sum8_cast_fu_542_p1;
        input_img_addr_5_reg_934 <= input_img2_sum9_cast_fu_566_p1;
        input_img_addr_6_reg_940 <= input_img2_sum1_cast_fu_584_p1;
        input_img_addr_7_reg_946 <= input_img2_sum2_cast_fu_608_p1;
        input_img_addr_reg_910 <= input_img2_sum_cast_fu_470_p1;
        output_img_addr_reg_952 <= output_img4_sum_cast_fu_626_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0))) begin
        input_img_addr_3_rea_reg_962 <= input_img_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0))) begin
        input_img_addr_4_rea_reg_967 <= input_img_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        input_img_addr_5_rea_reg_972 <= input_img_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_843 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        j_1_reg_905 <= j_1_fu_450_p2;
        tmp_2_mid2_v_v_reg_866 <= tmp_2_mid2_v_v_fu_267_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_843 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        or_cond5_reg_871 <= or_cond5_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        reg_180 <= input_img_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        reg_184 <= input_img_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp3_reg_982 <= tmp3_fu_649_p2;
        x_dir_2_0_2_reg_977 <= x_dir_2_0_2_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        tmp_18_reg_997 <= tmp_18_fu_732_p1;
        x_dir_2_2_reg_987 <= x_dir_2_2_fu_720_p2;
        y_dir_2_2_reg_992 <= y_dir_2_2_fu_726_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_2_cast_reg_817 <= tmp_2_cast_fu_188_p1;
        tmp_3_cast1_reg_822 <= tmp_3_cast1_fu_192_p1;
        tmp_3_cast_reg_827 <= tmp_3_cast_fu_196_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        tmp_6_reg_1024 <= tmp_6_fu_811_p2;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_flatten_fu_218_p2)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_input_img_ARREADY)) begin
        ap_sig_ioackin_input_img_ARREADY = input_img_ARREADY;
    end else begin
        ap_sig_ioackin_input_img_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_output_img_AWREADY)) begin
        ap_sig_ioackin_output_img_AWREADY = output_img_AWREADY;
    end else begin
        ap_sig_ioackin_output_img_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_output_img_WREADY)) begin
        ap_sig_ioackin_output_img_WREADY = output_img_WREADY;
    end else begin
        ap_sig_ioackin_output_img_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_843 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_phi_fu_160_p4 = tmp_2_mid2_v_v_reg_866;
    end else begin
        i_phi_fu_160_p4 = i_reg_156;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_843 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten_phi_fu_149_p4 = indvar_flatten_next_reg_847;
    end else begin
        indvar_flatten_phi_fu_149_p4 = indvar_flatten_reg_145;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_input_img_ARREADY)) begin
        if ((ap_condition_870 == 1'b1)) begin
            input_img_ARADDR = input_img_addr_7_reg_946;
        end else if ((ap_condition_858 == 1'b1)) begin
            input_img_ARADDR = input_img_addr_6_reg_940;
        end else if ((ap_condition_846 == 1'b1)) begin
            input_img_ARADDR = input_img_addr_5_reg_934;
        end else if ((ap_condition_834 == 1'b1)) begin
            input_img_ARADDR = input_img_addr_4_reg_928;
        end else if ((ap_condition_822 == 1'b1)) begin
            input_img_ARADDR = input_img_addr_3_reg_922;
        end else if ((ap_condition_810 == 1'b1)) begin
            input_img_ARADDR = input_img_addr_2_reg_916;
        end else if ((ap_condition_798 == 1'b1)) begin
            input_img_ARADDR = input_img_addr_1_reg_881;
        end else if ((ap_condition_784 == 1'b1)) begin
            input_img_ARADDR = input_img_addr_reg_910;
        end else begin
            input_img_ARADDR = 'bx;
        end
    end else begin
        input_img_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op130_readreq_state5) & (ap_block_pp0_stage3_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_input_img_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_predicate_op132_readreq_state6) & (1'b0 == ap_reg_ioackin_input_img_ARREADY) & (ap_block_pp0_stage4_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_predicate_op135_readreq_state7) & (1'b0 == ap_reg_ioackin_input_img_ARREADY) & (ap_block_pp0_stage5_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == ap_predicate_op139_readreq_state8) & (1'b0 == ap_reg_ioackin_input_img_ARREADY) & (ap_block_pp0_stage6_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == ap_predicate_op144_readreq_state9) & (1'b0 == ap_reg_ioackin_input_img_ARREADY) & (ap_block_pp0_stage7_flag00001001 == 1'b0)) | ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_reg_ioackin_input_img_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0)) | ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_reg_ioackin_input_img_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == ap_reg_ioackin_input_img_ARREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)))) begin
        input_img_ARVALID = 1'b1;
    end else begin
        input_img_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)))) begin
        input_img_RREADY = 1'b1;
    end else begin
        input_img_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00000000 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0)))) begin
        input_img_blk_n_AR = m_axi_input_img_ARREADY;
    end else begin
        input_img_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00000000 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        input_img_blk_n_R = m_axi_input_img_RVALID;
    end else begin
        input_img_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_843 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        j_phi_fu_172_p4 = j_1_reg_905;
    end else begin
        j_phi_fu_172_p4 = j_reg_168;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (ap_block_pp0_stage3_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_output_img_AWREADY))) begin
        output_img_AWVALID = 1'b1;
    end else begin
        output_img_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        output_img_BREADY = 1'b1;
    end else begin
        output_img_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (ap_block_pp0_stage4_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_output_img_WREADY))) begin
        output_img_WVALID = 1'b1;
    end else begin
        output_img_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871))) begin
        output_img_blk_n_AW = m_axi_output_img_AWREADY;
    end else begin
        output_img_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        output_img_blk_n_B = m_axi_output_img_BVALID;
    end else begin
        output_img_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871))) begin
        output_img_blk_n_W = m_axi_output_img_WREADY;
    end else begin
        output_img_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_218_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_218_p2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_block_pp0_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abscond7_fu_783_p2 = (($signed(y_dir_2_2_2_fu_762_p2) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_773_p2 = (($signed(x_dir_2_2_2_fu_757_p2) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10_io)) | ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == input_img_RVALID)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10_io)) | ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == input_img_RVALID)));
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_flag00001001 = (((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == input_img_RVALID)) | ((1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'b0 == output_img_BVALID)));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011001 = (((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state11_io)) | ((1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'b0 == output_img_BVALID)));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011011 = (((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state11_io)) | ((1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'b0 == output_img_BVALID)));
end

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage2_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | (1'b1 == ap_block_state12_io)));
end

always @ (*) begin
    ap_block_pp0_stage2_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | (1'b1 == ap_block_state12_io)));
end

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage3_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state5_io)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state21_io)));
end

always @ (*) begin
    ap_block_pp0_stage3_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state5_io)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state21_io)));
end

assign ap_block_pp0_stage4_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage4_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state6_io)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state22_io)));
end

always @ (*) begin
    ap_block_pp0_stage4_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state6_io)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state22_io)));
end

assign ap_block_pp0_stage5_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage5_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state7_io)));
end

always @ (*) begin
    ap_block_pp0_stage5_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state7_io)));
end

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage6_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8_io)));
end

always @ (*) begin
    ap_block_pp0_stage6_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8_io)));
end

assign ap_block_pp0_stage7_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage7_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_pp0_stage7_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_state10_io = ((or_cond5_reg_871 == 1'd1) & (1'b0 == ap_sig_ioackin_input_img_ARREADY));
end

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((or_cond5_reg_871 == 1'd1) & (1'b0 == ap_sig_ioackin_input_img_ARREADY));
end

assign ap_block_state11_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == ap_sig_ioackin_input_img_ARREADY));
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter1 = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter1 = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_state14_pp0_stage4_iter1 = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_state15_pp0_stage5_iter1 = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_state16_pp0_stage6_iter1 = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_state17_pp0_stage7_iter1 = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_state18_pp0_stage0_iter2 = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

always @ (*) begin
    ap_block_state19_pp0_stage1_iter2 = ((1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (1'b0 == input_img_RVALID));
end

assign ap_block_state20_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (1'b0 == ap_sig_ioackin_output_img_AWREADY));
end

assign ap_block_state21_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (1'b0 == ap_sig_ioackin_output_img_WREADY));
end

assign ap_block_state22_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp0_stage1_iter3 = ((1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871) & (1'b0 == output_img_BVALID));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((1'b0 == ap_sig_ioackin_input_img_ARREADY) & (1'b1 == ap_predicate_op130_readreq_state5));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((1'b0 == ap_sig_ioackin_input_img_ARREADY) & (1'b1 == ap_predicate_op132_readreq_state6));
end

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((1'b0 == ap_sig_ioackin_input_img_ARREADY) & (1'b1 == ap_predicate_op135_readreq_state7));
end

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((1'b0 == ap_sig_ioackin_input_img_ARREADY) & (1'b1 == ap_predicate_op139_readreq_state8));
end

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((1'b0 == ap_sig_ioackin_input_img_ARREADY) & (1'b1 == ap_predicate_op144_readreq_state9));
end

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1364 = ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871));
end

always @ (*) begin
    ap_condition_1368 = ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter2_or_cond5_reg_871));
end

always @ (*) begin
    ap_condition_784 = ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op130_readreq_state5) & (ap_block_pp0_stage3_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_798 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_predicate_op132_readreq_state6) & (ap_block_pp0_stage4_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_810 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_predicate_op135_readreq_state7) & (ap_block_pp0_stage5_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_822 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == ap_predicate_op139_readreq_state8) & (ap_block_pp0_stage6_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_834 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == ap_predicate_op144_readreq_state9) & (ap_block_pp0_stage7_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_846 = ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_858 = ((or_cond5_reg_871 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_870 = ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_or_cond5_reg_871) & (ap_block_pp0_stage2_flag00001001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op130_readreq_state5 = ((exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1));
end

always @ (*) begin
    ap_predicate_op132_readreq_state6 = ((exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1));
end

always @ (*) begin
    ap_predicate_op135_readreq_state7 = ((exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1));
end

always @ (*) begin
    ap_predicate_op139_readreq_state8 = ((exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1));
end

always @ (*) begin
    ap_predicate_op144_readreq_state9 = ((exitcond_flatten_reg_843 == 1'd0) & (or_cond5_reg_871 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_flatten_fu_218_p2 = ((indvar_flatten_phi_fu_149_p4 == 21'd1048576) ? 1'b1 : 1'b0);

assign exitcond_fu_230_p2 = ((j_phi_fu_172_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign i_s_fu_249_p2 = (11'd1 + i_reg_156);

assign indvar_flatten_next_fu_224_p2 = (indvar_flatten_phi_fu_149_p4 + 21'd1);

assign input_img2_sum1_cast_fu_584_p1 = $signed(input_img2_sum1_fu_579_p2);

assign input_img2_sum1_fu_579_p2 = ($signed(tmp_3_cast_reg_827) + $signed(tmp_12_2_1_cast_fu_576_p1));

assign input_img2_sum2_cast_fu_608_p1 = $signed(input_img2_sum2_fu_603_p2);

assign input_img2_sum2_fu_603_p2 = ($signed(tmp_3_cast_reg_827) + $signed(tmp_12_2_2_cast_fu_599_p1));

assign input_img2_sum5_cast_fu_422_p1 = $signed(input_img2_sum5_fu_417_p2);

assign input_img2_sum5_fu_417_p2 = ($signed(tmp_3_cast1_reg_822) + $signed(tmp_12_0_1_cast_fu_413_p1));

assign input_img2_sum6_cast_fu_494_p1 = $signed(input_img2_sum6_fu_489_p2);

assign input_img2_sum6_fu_489_p2 = ($signed(tmp_3_cast_reg_827) + $signed(tmp_12_0_2_cast_fu_485_p1));

assign input_img2_sum7_cast_fu_518_p1 = $signed(input_img2_sum7_fu_513_p2);

assign input_img2_sum7_fu_513_p2 = ($signed(tmp_3_cast_reg_827) + $signed(tmp_12_1_cast_fu_509_p1));

assign input_img2_sum8_cast_fu_542_p1 = $signed(input_img2_sum8_fu_537_p2);

assign input_img2_sum8_fu_537_p2 = ($signed(tmp_3_cast_reg_827) + $signed(tmp_12_1_2_cast_fu_533_p1));

assign input_img2_sum9_cast_fu_566_p1 = $signed(input_img2_sum9_fu_561_p2);

assign input_img2_sum9_fu_561_p2 = ($signed(tmp_3_cast_reg_827) + $signed(tmp_12_2_cast_fu_557_p1));

assign input_img2_sum_cast_fu_470_p1 = $signed(input_img2_sum_fu_465_p2);

assign input_img2_sum_fu_465_p2 = ($signed(tmp_3_cast_reg_827) + $signed(tmp_23_cast_fu_461_p1));

assign j_1_fu_450_p2 = (j_mid2_fu_242_p3 + 11'd1);

assign j_cast5_cast_fu_369_p1 = j_mid2_fu_242_p3;

assign j_cast6_fu_365_p1 = j_mid2_fu_242_p3;

assign j_cast7_fu_361_p1 = j_mid2_fu_242_p3;

assign j_mid2_fu_242_p3 = ((exitcond_reg_852[0:0] === 1'b1) ? 11'd0 : j_reg_168);

assign or_cond5_fu_391_p2 = (tmp2_fu_385_p2 & tmp1_mid2_fu_331_p3);

assign output_img4_sum_cast_fu_626_p1 = $signed(output_img4_sum_fu_621_p2);

assign output_img4_sum_fu_621_p2 = ($signed(tmp_2_cast_reg_817) + $signed(tmp_8_cast_fu_618_p1));

assign p_shl1_cast_fu_677_p1 = p_shl1_fu_670_p3;

assign p_shl1_fu_670_p3 = {{input_img_addr_3_rea_reg_962}, {1'd0}};

assign p_shl_cast_fu_744_p1 = p_shl_fu_736_p3;

assign p_shl_fu_736_p3 = {{reg_180}, {1'd0}};

assign tmp1_fu_212_p2 = (tmp_fu_200_p2 & tmp_1_fu_206_p2);

assign tmp1_mid1_fu_325_p2 = (tmp_mid1_fu_255_p2 & tmp_1_mid1_fu_261_p2);

assign tmp1_mid2_fu_331_p3 = ((exitcond_reg_852[0:0] === 1'b1) ? tmp1_mid1_fu_325_p2 : tmp1_reg_838);

assign tmp2_fu_385_p2 = (tmp_4_fu_373_p2 & tmp_5_fu_379_p2);

assign tmp3_cast_fu_704_p1 = tmp3_reg_982;

assign tmp3_fu_649_p2 = (tmp_131_cast_fu_636_p1 + tmp_13_0_2_cast_fu_640_p1);

assign tmp_101_cast_fu_407_p2 = (tmp_20_mid2_fu_341_p3 + j_cast6_fu_365_p1);

assign tmp_10_1_fu_432_p2 = (j_cast6_fu_365_p1 + tmp_2_mid2_fu_278_p3);

assign tmp_10_2_cast4_fu_444_p2 = (tmp_25_mid2_fu_353_p3 + j_cast6_fu_365_p1);

assign tmp_10_2_fu_438_p2 = (j_cast7_fu_361_p1 + tmp_2_mid2_3_fu_317_p3);

assign tmp_10_fu_349_p1 = tmp_7_fu_310_p3[9:0];

assign tmp_11_0_2_fu_480_p2 = (20'd1 + tmp_101_cast_reg_875);

assign tmp_11_1_2_fu_528_p2 = (20'd1 + tmp_10_1_reg_887);

assign tmp_11_1_fu_504_p2 = ($signed(20'd1048575) + $signed(tmp_10_1_reg_887));

assign tmp_11_2_2_fu_594_p2 = (20'd1 + tmp_10_2_cast4_reg_899);

assign tmp_11_2_fu_552_p2 = ($signed(20'd1048575) + $signed(tmp_10_2_cast4_reg_899));

assign tmp_11_fu_397_p2 = ($signed(j_cast5_cast_fu_369_p1) + $signed(tmp_mid2_cast_fu_300_p1));

assign tmp_12_0_1_cast_fu_413_p1 = $unsigned(tmp_21_cast_fu_403_p1);

assign tmp_12_0_2_cast_fu_485_p1 = tmp_11_0_2_fu_480_p2;

assign tmp_12_1_2_cast_fu_533_p1 = tmp_11_1_2_fu_528_p2;

assign tmp_12_1_cast_fu_509_p1 = tmp_11_1_fu_504_p2;

assign tmp_12_2_1_cast_fu_576_p1 = tmp_10_2_reg_894;

assign tmp_12_2_2_cast_fu_599_p1 = tmp_11_2_2_fu_594_p2;

assign tmp_12_2_cast_fu_557_p1 = tmp_11_2_fu_552_p2;

assign tmp_12_fu_768_p2 = (reg_184 + tmp_18_reg_997);

assign tmp_131_cast_fu_636_p1 = reg_180;

assign tmp_13_0_2_cast_fu_640_p1 = input_img_addr_2_rea_reg_957;

assign tmp_13_2_2_cast_fu_753_p1 = reg_184;

assign tmp_13_2_cast_fu_717_p1 = input_img_addr_5_rea_reg_972;

assign tmp_13_fu_789_p2 = (8'd0 - tmp_12_reg_1002);

assign tmp_14_fu_794_p3 = ((abscond_reg_1008[0:0] === 1'b1) ? tmp_12_reg_1002 : tmp_13_fu_789_p2);

assign tmp_15_1_2_cast_fu_694_p1 = tmp_15_1_2_fu_687_p3;

assign tmp_15_1_2_fu_687_p3 = {{input_img_addr_4_rea_reg_967}, {1'd0}};

assign tmp_15_fu_456_p2 = ($signed(20'd1048575) + $signed(tmp_101_cast_reg_875));

assign tmp_16_0_1_cast_fu_663_p1 = tmp_16_0_1_fu_655_p3;

assign tmp_16_0_1_fu_655_p3 = {{reg_184}, {1'd0}};

assign tmp_16_fu_800_p2 = (8'd0 - tmp_19_reg_1013);

assign tmp_17_fu_805_p3 = ((abscond7_reg_1019[0:0] === 1'b1) ? tmp_19_reg_1013 : tmp_16_fu_800_p2);

assign tmp_18_fu_732_p1 = x_dir_2_2_fu_720_p2[7:0];

assign tmp_19_fu_779_p1 = y_dir_2_2_2_fu_762_p2[7:0];

assign tmp_1_fu_206_p2 = ((i_phi_fu_160_p4 < 11'd1023) ? 1'b1 : 1'b0);

assign tmp_1_mid1_fu_261_p2 = ((i_s_fu_249_p2 < 11'd1023) ? 1'b1 : 1'b0);

assign tmp_20_mid2_fu_341_p3 = {{tmp_8_fu_337_p1}, {10'd0}};

assign tmp_21_cast_fu_403_p1 = $signed(tmp_11_fu_397_p2);

assign tmp_23_cast_fu_461_p1 = tmp_15_fu_456_p2;

assign tmp_25_mid2_fu_353_p3 = {{tmp_10_fu_349_p1}, {10'd0}};

assign tmp_2_cast_fu_188_p1 = $signed(output_img_offset);

assign tmp_2_fu_274_p1 = tmp_2_mid2_v_v_fu_267_p3[9:0];

assign tmp_2_mid2_3_fu_317_p3 = {{tmp_7_fu_310_p3}, {10'd0}};

assign tmp_2_mid2_fu_278_p3 = {{tmp_2_fu_274_p1}, {10'd0}};

assign tmp_2_mid2_v_v_fu_267_p3 = ((exitcond_reg_852[0:0] === 1'b1) ? i_s_fu_249_p2 : i_reg_156);

assign tmp_3_cast1_fu_192_p1 = $signed(input_img_offset);

assign tmp_3_cast_fu_196_p1 = $signed(input_img_offset);

assign tmp_3_fu_292_p3 = {{tmp_mid2_v_v_v_fu_286_p3}, {10'd0}};

assign tmp_4_fu_373_p2 = ((j_mid2_fu_242_p3 != 11'd0) ? 1'b1 : 1'b0);

assign tmp_5_fu_379_p2 = ((j_mid2_fu_242_p3 < 11'd1023) ? 1'b1 : 1'b0);

assign tmp_6_fu_811_p2 = (tmp_14_fu_794_p3 + tmp_17_fu_805_p3);

assign tmp_7_fu_310_p3 = ((exitcond_reg_852[0:0] === 1'b1) ? tmp_95_2_mid1_fu_304_p2 : i_s_fu_249_p2);

assign tmp_8_cast_fu_618_p1 = tmp_10_1_reg_887;

assign tmp_8_fu_337_p1 = tmp_mid2_v_v_v_fu_286_p3[9:0];

assign tmp_95_2_mid1_fu_304_p2 = (11'd2 + i_reg_156);

assign tmp_fu_200_p2 = ((i_phi_fu_160_p4 != 11'd0) ? 1'b1 : 1'b0);

assign tmp_mid1_fu_255_p2 = ((i_s_fu_249_p2 != 11'd0) ? 1'b1 : 1'b0);

assign tmp_mid2_cast_fu_300_p1 = $signed(tmp_3_fu_292_p3);

assign tmp_mid2_v_v_v_fu_286_p3 = ((exitcond_reg_852[0:0] === 1'b1) ? i_reg_156 : tmp_s_reg_861);

assign tmp_s_fu_236_p2 = ($signed(11'd2047) + $signed(i_phi_fu_160_p4));

assign x_dir_2_0_2_cast_fu_667_p1 = $signed(x_dir_2_0_2_reg_977);

assign x_dir_2_0_2_fu_643_p2 = (tmp_13_0_2_cast_fu_640_p1 - tmp_131_cast_fu_636_p1);

assign x_dir_2_1_1_fu_681_p2 = ($signed(x_dir_2_0_2_cast_fu_667_p1) - $signed(p_shl1_cast_fu_677_p1));

assign x_dir_2_1_2_fu_698_p2 = (x_dir_2_1_1_fu_681_p2 + tmp_15_1_2_cast_fu_694_p1);

assign x_dir_2_2_2_fu_757_p2 = (x_dir_2_2_reg_987 + tmp_13_2_2_cast_fu_753_p1);

assign x_dir_2_2_fu_720_p2 = (x_dir_2_1_2_fu_698_p2 - tmp_13_2_cast_fu_717_p1);

assign y_dir_2_1_2_cast_fu_713_p1 = y_dir_2_1_2_fu_707_p2;

assign y_dir_2_1_2_fu_707_p2 = (tmp3_cast_fu_704_p1 + tmp_16_0_1_cast_fu_663_p1);

assign y_dir_2_2_1_fu_748_p2 = (y_dir_2_2_reg_992 - p_shl_cast_fu_744_p1);

assign y_dir_2_2_2_fu_762_p2 = (y_dir_2_2_1_fu_748_p2 - tmp_13_2_2_cast_fu_753_p1);

assign y_dir_2_2_fu_726_p2 = (y_dir_2_1_2_cast_fu_713_p1 - tmp_13_2_cast_fu_717_p1);

endmodule //ip_sobel
