-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    img_1_data_stream_0_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_1_data_stream_0_full_n : IN STD_LOGIC;
    img_1_data_stream_0_write : OUT STD_LOGIC;
    img_0_data_stream_0_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_0_empty_n : IN STD_LOGIC;
    img_0_data_stream_0_read : OUT STD_LOGIC );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv58_1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_37 : STD_LOGIC_VECTOR (7 downto 0) := "00110111";
    constant ap_const_lv8_CD : STD_LOGIC_VECTOR (7 downto 0) := "11001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal line_buffer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal line_buffer_ce0 : STD_LOGIC;
    signal line_buffer_we0 : STD_LOGIC;
    signal line_buffer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal line_buffer_ce1 : STD_LOGIC;
    signal line_buffer_we1 : STD_LOGIC;
    signal line_buffer_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_buffer_ce0 : STD_LOGIC;
    signal window_buffer_we0 : STD_LOGIC;
    signal window_buffer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_buffer_ce1 : STD_LOGIC;
    signal window_buffer_we1 : STD_LOGIC;
    signal window_buffer_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Gx_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Gx_ce0 : STD_LOGIC;
    signal Gx_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Gy_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Gy_ce0 : STD_LOGIC;
    signal Gy_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal img_1_data_stream_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_5_reg_900 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_0_data_stream_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal or_cond_i_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_390_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_3_fu_394_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_i_fu_398_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i_fu_404_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_i_fu_410_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_i_fu_416_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_fu_427_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_reg_805 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal output_row_fu_433_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_row_reg_810 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond4_i_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_460_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_reg_833 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_col_fu_466_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_col_reg_838 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_i_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_478_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_848 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_37_i_fu_500_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_37_i_reg_853 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_i_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_buffer_addr_reg_858 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_cond_i_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_addr_reg_873 : STD_LOGIC_VECTOR (6 downto 0);
    signal line_buffer_addr_2_reg_879 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal line_buffer_load_reg_885 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal i_fu_614_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_910 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_43_i_fu_636_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_43_i_reg_915 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_i_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_fu_690_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_i_reg_920 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_702_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_930 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_i_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_buffer_load_2_reg_950 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Gx_load_reg_955 : STD_LOGIC_VECTOR (2 downto 0);
    signal Gy_load_reg_960 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_756_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_764_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_i_fu_748_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_24_i_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_i_reg_235 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_i_reg_246 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state14 : BOOLEAN;
    signal k_i_reg_258 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal storemerge5_i_phi_fu_273_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal storemerge5_i_reg_269 : STD_LOGIC_VECTOR (7 downto 0);
    signal storemerge1_i_reg_281 : STD_LOGIC_VECTOR (7 downto 0);
    signal storemerge_i_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_dir_i_reg_305 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal or_cond8_i_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_dir_i_reg_317 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_reg_329 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_dir_1_i_reg_340 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_dir_1_i_reg_352 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_i_reg_364 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_cast_i_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_i_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_i_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_i_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_i_fu_562_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_i_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_i_fu_488_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_i_fu_496_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_i_fu_484_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_38_i_fu_506_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_i_fu_517_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_i_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_cast_i_fu_538_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_i_fu_542_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_i_fu_571_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_i_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_i_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_i_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_i_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_i_fu_624_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_i_fu_632_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_cast_i_fu_620_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_648_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_i_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_fu_652_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_672_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_i_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_i_fu_676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_i_fu_682_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_i_fu_658_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_cast_i_fu_708_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_44_i_fu_712_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_i_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_val_fu_733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_756_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_cast_i_fu_724_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_764_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component convolution_sobeldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Loop_1_proc_line_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_1_proc_windocud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_1_proc_Gx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Loop_1_proc_Gy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    line_buffer_U : component Loop_1_proc_line_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_address0,
        ce0 => line_buffer_ce0,
        we0 => line_buffer_we0,
        d0 => line_buffer_d0,
        q0 => line_buffer_q0,
        address1 => line_buffer_address1,
        ce1 => line_buffer_ce1,
        we1 => line_buffer_we1,
        d1 => line_buffer_q1,
        q1 => line_buffer_q1);

    window_buffer_U : component Loop_1_proc_windocud
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => window_buffer_address0,
        ce0 => window_buffer_ce0,
        we0 => window_buffer_we0,
        d0 => window_buffer_d0,
        q0 => window_buffer_q0,
        address1 => window_buffer_address1,
        ce1 => window_buffer_ce1,
        we1 => window_buffer_we1,
        d1 => window_buffer_d1,
        q1 => window_buffer_q1);

    Gx_U : component Loop_1_proc_Gx
    generic map (
        DataWidth => 3,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Gx_address0,
        ce0 => Gx_ce0,
        q0 => Gx_q0);

    Gy_U : component Loop_1_proc_Gy
    generic map (
        DataWidth => 3,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Gy_address0,
        ce0 => Gy_ce0,
        q0 => Gy_q0);

    convolution_sobeldEe_U11 : component convolution_sobeldEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => Gx_load_reg_955,
        din1 => grp_fu_756_p1,
        din2 => x_dir_1_i_reg_352,
        dout => grp_fu_756_p3);

    convolution_sobeldEe_U12 : component convolution_sobeldEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => Gy_load_reg_960,
        din1 => grp_fu_764_p1,
        din2 => y_dir_1_i_reg_340,
        dout => grp_fu_764_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond4_i_fu_422_p2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    col_i_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond4_i_fu_422_p2))) then 
                col_i_reg_246 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and not(((tmp_5_reg_900 = ap_const_lv1_0) and (ap_const_logic_0 = img_1_data_stream_0_full_n))))) then 
                col_i_reg_246 <= col_reg_833;
            end if; 
        end if;
    end process;

    i_i_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_reg_900 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = or_cond8_i_fu_602_p2))) then 
                i_i_reg_329 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_i_fu_696_p2))) then 
                i_i_reg_329 <= i_reg_910;
            end if; 
        end if;
    end process;

    j_i_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_i_fu_608_p2))) then 
                j_i_reg_364 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_i_reg_364 <= j_reg_930;
            end if; 
        end if;
    end process;

    k_i_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_i_reg_258 <= k_reg_848;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_i_fu_455_p2))) then 
                k_i_reg_258 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    row_i_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond3_i_fu_455_p2))) then 
                row_i_reg_235 <= row_reg_805;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                row_i_reg_235 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    storemerge1_i_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_i_fu_472_p2) and (ap_const_lv1_0 = or_cond_i_fu_533_p2))) then 
                storemerge1_i_reg_281 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond_i_reg_869 = ap_const_lv1_1) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n))))) then 
                storemerge1_i_reg_281 <= line_buffer_q1;
            end if; 
        end if;
    end process;

    storemerge5_i_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_i_fu_472_p2) and (ap_const_lv1_0 = or_cond_i_fu_533_p2))) then 
                storemerge5_i_reg_269 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond_i_reg_869 = ap_const_lv1_1) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n))))) then 
                storemerge5_i_reg_269 <= line_buffer_load_reg_885;
            end if; 
        end if;
    end process;

    storemerge_i_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_i_fu_472_p2) and (ap_const_lv1_0 = or_cond_i_fu_533_p2))) then 
                storemerge_i_reg_293 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond_i_reg_869 = ap_const_lv1_1) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n))))) then 
                storemerge_i_reg_293 <= img_0_data_stream_0_dout;
            end if; 
        end if;
    end process;

    tmp_8_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_5_reg_900 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = or_cond8_i_fu_602_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_24_i_fu_738_p2)))) then 
                tmp_8_reg_375 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_24_i_fu_738_p2))) then 
                tmp_8_reg_375 <= p_i_fu_748_p3;
            end if; 
        end if;
    end process;

    x_dir_1_i_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_i_fu_608_p2))) then 
                x_dir_1_i_reg_352 <= x_dir_i_reg_317;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                x_dir_1_i_reg_352 <= grp_fu_756_p3;
            end if; 
        end if;
    end process;

    x_dir_i_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_reg_900 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = or_cond8_i_fu_602_p2))) then 
                x_dir_i_reg_317 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_i_fu_696_p2))) then 
                x_dir_i_reg_317 <= x_dir_1_i_reg_352;
            end if; 
        end if;
    end process;

    y_dir_1_i_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_i_fu_608_p2))) then 
                y_dir_1_i_reg_340 <= y_dir_i_reg_305;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                y_dir_1_i_reg_340 <= grp_fu_764_p3;
            end if; 
        end if;
    end process;

    y_dir_i_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_reg_900 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = or_cond8_i_fu_602_p2))) then 
                y_dir_i_reg_305 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_i_fu_696_p2))) then 
                y_dir_i_reg_305 <= y_dir_1_i_reg_340;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Gx_load_reg_955 <= Gx_q0;
                Gy_load_reg_960 <= Gy_q0;
                window_buffer_load_2_reg_950 <= window_buffer_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                col_reg_833 <= col_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_reg_910 <= i_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_reg_930 <= j_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_848 <= k_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    line_buffer_addr_2_reg_879(5 downto 0) <= tmp_41_i_fu_562_p3(7 - 1 downto 0)(5 downto 0);
                line_buffer_load_reg_885 <= line_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_i_fu_472_p2) and (ap_const_lv1_1 = or_cond_i_fu_533_p2))) then
                line_buffer_addr_reg_873 <= tmp_40_cast_i_fu_548_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_i_fu_472_p2))) then
                or_cond_i_reg_869 <= or_cond_i_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_i_fu_455_p2))) then
                output_col_reg_838 <= output_col_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond4_i_fu_422_p2))) then
                output_row_reg_810 <= output_row_fu_433_p2;
                tmp_4_i_reg_815 <= tmp_4_i_fu_439_p2;
                tmp_5_i_reg_820 <= tmp_5_i_fu_444_p2;
                tmp_6_i_reg_825 <= tmp_6_i_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_reg_805 <= row_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond1_i_fu_608_p2))) then
                tmp_23_i_reg_920 <= tmp_23_i_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_i_fu_472_p2))) then
                tmp_37_i_reg_853 <= tmp_37_i_fu_500_p2;
                window_buffer_addr_reg_858 <= tmp_38_cast_i_fu_512_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_i_fu_608_p2))) then
                tmp_43_i_reg_915 <= tmp_43_i_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n))))) then
                tmp_5_reg_900 <= tmp_10_i_fu_571_p2(5 downto 5);
            end if;
        end if;
    end process;
    line_buffer_addr_2_reg_879(6) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_1_data_stream_0_full_n, img_0_data_stream_0_empty_n, ap_CS_fsm_state14, tmp_5_reg_900, ap_CS_fsm_state7, or_cond_i_reg_869, ap_CS_fsm_state2, exitcond4_i_fu_422_p2, ap_CS_fsm_state3, exitcond3_i_fu_455_p2, ap_CS_fsm_state4, exitcond2_i_fu_472_p2, or_cond_i_fu_533_p2, ap_CS_fsm_state9, exitcond1_i_fu_608_p2, ap_CS_fsm_state10, exitcond_i_fu_696_p2, ap_CS_fsm_state8, or_cond8_i_fu_602_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond4_i_fu_422_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond3_i_fu_455_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_i_fu_472_p2) and (ap_const_lv1_0 = or_cond_i_fu_533_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_i_fu_472_p2) and (ap_const_lv1_1 = or_cond_i_fu_533_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((tmp_5_reg_900 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = or_cond8_i_fu_602_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_i_fu_608_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_i_fu_696_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and not(((tmp_5_reg_900 = ap_const_lv1_0) and (ap_const_logic_0 = img_1_data_stream_0_full_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    Gx_address0 <= tmp_44_cast_i_fu_717_p1(4 - 1 downto 0);

    Gx_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Gx_ce0 <= ap_const_logic_1;
        else 
            Gx_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Gy_address0 <= tmp_44_cast_i_fu_717_p1(4 - 1 downto 0);

    Gy_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Gy_ce0 <= ap_const_logic_1;
        else 
            Gy_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state14_assign_proc : process(img_1_data_stream_0_full_n, tmp_5_reg_900)
    begin
                ap_block_state14 <= ((tmp_5_reg_900 = ap_const_lv1_0) and (ap_const_logic_0 = img_1_data_stream_0_full_n));
    end process;


    ap_block_state7_assign_proc : process(img_0_data_stream_0_empty_n, or_cond_i_reg_869)
    begin
                ap_block_state7 <= ((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond4_i_fu_422_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond4_i_fu_422_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_i_fu_422_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond4_i_fu_422_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_460_p2 <= std_logic_vector(unsigned(col_i_reg_246) + unsigned(ap_const_lv6_1));
    edge_val_fu_733_p2 <= (tmp_23_i_reg_920 xor ap_const_lv8_FF);
    exitcond1_i_fu_608_p2 <= "1" when (i_i_reg_329 = ap_const_lv2_3) else "0";
    exitcond2_i_fu_472_p2 <= "1" when (k_i_reg_258 = ap_const_lv2_3) else "0";
    exitcond3_i_fu_455_p2 <= "1" when (col_i_reg_246 = tmp_12_i_fu_410_p2) else "0";
    exitcond4_i_fu_422_p2 <= "1" when (row_i_reg_235 = tmp_31_i_fu_416_p2) else "0";
    exitcond_i_fu_696_p2 <= "1" when (j_i_reg_364 = ap_const_lv2_3) else "0";
    grp_fu_756_p1 <= tmp_30_cast_i_fu_724_p1(8 - 1 downto 0);
    grp_fu_764_p1 <= tmp_30_cast_i_fu_724_p1(8 - 1 downto 0);
    i_fu_614_p2 <= std_logic_vector(unsigned(i_i_reg_329) + unsigned(ap_const_lv2_1));

    img_0_data_stream_0_blk_n_assign_proc : process(img_0_data_stream_0_empty_n, ap_CS_fsm_state7, or_cond_i_reg_869)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond_i_reg_869 = ap_const_lv1_1))) then 
            img_0_data_stream_0_blk_n <= img_0_data_stream_0_empty_n;
        else 
            img_0_data_stream_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_0_data_stream_0_read_assign_proc : process(img_0_data_stream_0_empty_n, ap_CS_fsm_state7, or_cond_i_reg_869)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond_i_reg_869 = ap_const_lv1_1) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n))))) then 
            img_0_data_stream_0_read <= ap_const_logic_1;
        else 
            img_0_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_1_data_stream_0_blk_n_assign_proc : process(img_1_data_stream_0_full_n, ap_CS_fsm_state14, tmp_5_reg_900)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_5_reg_900 = ap_const_lv1_0))) then 
            img_1_data_stream_0_blk_n <= img_1_data_stream_0_full_n;
        else 
            img_1_data_stream_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_1_data_stream_0_din <= tmp_8_reg_375;

    img_1_data_stream_0_write_assign_proc : process(img_1_data_stream_0_full_n, ap_CS_fsm_state14, tmp_5_reg_900)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_5_reg_900 = ap_const_lv1_0) and not(((tmp_5_reg_900 = ap_const_lv1_0) and (ap_const_logic_0 = img_1_data_stream_0_full_n))))) then 
            img_1_data_stream_0_write <= ap_const_logic_1;
        else 
            img_1_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_702_p2 <= std_logic_vector(unsigned(j_i_reg_364) + unsigned(ap_const_lv2_1));
    k_fu_478_p2 <= std_logic_vector(unsigned(k_i_reg_258) + unsigned(ap_const_lv2_1));

    line_buffer_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, line_buffer_addr_2_reg_879, ap_CS_fsm_state6, tmp_40_cast_i_fu_548_p1, tmp_3_i_fu_557_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_address0 <= line_buffer_addr_2_reg_879;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_address0 <= tmp_3_i_fu_557_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            line_buffer_address0 <= tmp_40_cast_i_fu_548_p1(7 - 1 downto 0);
        else 
            line_buffer_address0 <= "XXXXXXX";
        end if; 
    end process;


    line_buffer_address1_assign_proc : process(ap_CS_fsm_state7, line_buffer_addr_reg_873, ap_CS_fsm_state6, tmp_41_i_fu_562_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_address1 <= line_buffer_addr_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_address1 <= tmp_41_i_fu_562_p3(7 - 1 downto 0);
        else 
            line_buffer_address1 <= "XXXXXXX";
        end if; 
    end process;


    line_buffer_ce0_assign_proc : process(img_0_data_stream_0_empty_n, ap_CS_fsm_state7, or_cond_i_reg_869, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state7) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n)))))) then 
            line_buffer_ce0 <= ap_const_logic_1;
        else 
            line_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_ce1_assign_proc : process(img_0_data_stream_0_empty_n, ap_CS_fsm_state7, or_cond_i_reg_869, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state7) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n)))))) then 
            line_buffer_ce1 <= ap_const_logic_1;
        else 
            line_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_d0_assign_proc : process(img_0_data_stream_0_dout, line_buffer_q0, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_d0 <= img_0_data_stream_0_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_d0 <= line_buffer_q0;
        else 
            line_buffer_d0 <= "XXXXXXXX";
        end if; 
    end process;


    line_buffer_we0_assign_proc : process(img_0_data_stream_0_empty_n, ap_CS_fsm_state7, or_cond_i_reg_869, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond_i_reg_869 = ap_const_lv1_1) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n)))))) then 
            line_buffer_we0 <= ap_const_logic_1;
        else 
            line_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_we1_assign_proc : process(img_0_data_stream_0_empty_n, ap_CS_fsm_state7, or_cond_i_reg_869)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond_i_reg_869 = ap_const_lv1_1) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n))))) then 
            line_buffer_we1 <= ap_const_logic_1;
        else 
            line_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond8_i_fu_602_p2 <= (tmp2_i_fu_597_p2 or tmp1_i_fu_592_p2);
    or_cond_i_fu_533_p2 <= (tmp_8_i_fu_528_p2 and tmp_4_i_reg_815);
    output_col_fu_466_p2 <= std_logic_vector(unsigned(col_i_reg_246) + unsigned(ap_const_lv6_3F));
    output_row_fu_433_p2 <= std_logic_vector(unsigned(row_i_reg_235) + unsigned(ap_const_lv6_3F));
    p_i_fu_748_p3 <= 
        ap_const_lv8_FF when (tmp_26_i_fu_743_p2(0) = '1') else 
        edge_val_fu_733_p2;
    p_shl1_cast_i_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_i_fu_624_p3),5));
    p_shl_cast_i_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_i_fu_488_p3),5));
    row_fu_427_p2 <= std_logic_vector(unsigned(row_i_reg_235) + unsigned(ap_const_lv6_1));

    storemerge5_i_phi_fu_273_p4_assign_proc : process(ap_CS_fsm_state7, or_cond_i_reg_869, line_buffer_load_reg_885, storemerge5_i_reg_269)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (or_cond_i_reg_869 = ap_const_lv1_1))) then 
            storemerge5_i_phi_fu_273_p4 <= line_buffer_load_reg_885;
        else 
            storemerge5_i_phi_fu_273_p4 <= storemerge5_i_reg_269;
        end if; 
    end process;

    tmp1_i_fu_592_p2 <= (tmp_5_i_reg_820 or tmp_13_i_fu_583_p2);
    tmp2_i_fu_597_p2 <= (tmp_6_i_reg_825 or tmp_14_i_fu_588_p2);
    tmp_10_i_fu_571_p2 <= (output_col_reg_838 or output_row_reg_810);
    tmp_12_i_fu_410_p2 <= std_logic_vector(unsigned(tmp_3_fu_394_p1) + unsigned(ap_const_lv6_1));
    tmp_13_i_fu_583_p2 <= "1" when (output_col_reg_838 = ap_const_lv6_0) else "0";
    tmp_14_i_fu_588_p2 <= "1" when (output_col_reg_838 = tmp_2_i_fu_404_p2) else "0";
    tmp_15_i_fu_642_p2 <= "1" when (signed(x_dir_i_reg_317) > signed(ap_const_lv16_0)) else "0";
    tmp_17_i_fu_652_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_6_fu_648_p1));
    tmp_18_i_fu_658_p3 <= 
        tmp_6_fu_648_p1 when (tmp_15_i_fu_642_p2(0) = '1') else 
        tmp_17_i_fu_652_p2;
    tmp_19_i_fu_666_p2 <= "1" when (signed(y_dir_i_reg_305) > signed(ap_const_lv16_0)) else "0";
    tmp_1_i_fu_398_p2 <= std_logic_vector(unsigned(tmp_fu_390_p1) + unsigned(ap_const_lv6_3F));
    tmp_21_i_fu_676_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_7_fu_672_p1));
    tmp_22_i_fu_682_p3 <= 
        tmp_7_fu_672_p1 when (tmp_19_i_fu_666_p2(0) = '1') else 
        tmp_21_i_fu_676_p2;
    tmp_23_i_fu_690_p2 <= std_logic_vector(unsigned(tmp_22_i_fu_682_p3) + unsigned(tmp_18_i_fu_658_p3));
    tmp_24_i_fu_738_p2 <= "1" when (unsigned(tmp_23_i_reg_920) < unsigned(ap_const_lv8_37)) else "0";
    tmp_25_cast_i_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_329),5));
    tmp_26_i_fu_743_p2 <= "1" when (unsigned(tmp_23_i_reg_920) > unsigned(ap_const_lv8_CD)) else "0";
    tmp_29_cast_i_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_364),5));
    tmp_2_i_fu_404_p2 <= std_logic_vector(unsigned(tmp_3_fu_394_p1) + unsigned(ap_const_lv6_3F));
    tmp_30_cast_i_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buffer_load_2_reg_950),12));
    tmp_31_i_fu_416_p2 <= std_logic_vector(unsigned(tmp_fu_390_p1) + unsigned(ap_const_lv6_1));
    tmp_36_i_fu_488_p3 <= (k_i_reg_258 & ap_const_lv2_0);
        tmp_37_cast_i_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_i_reg_853),64));

    tmp_37_i_fu_500_p2 <= std_logic_vector(unsigned(p_shl_cast_i_fu_496_p1) - unsigned(tmp_cast_i_fu_484_p1));
        tmp_38_cast_i_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_i_fu_506_p2),64));

    tmp_38_i_fu_506_p2 <= std_logic_vector(unsigned(tmp_37_i_fu_500_p2) + unsigned(ap_const_lv5_1));
        tmp_39_cast_i_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_39_i_fu_517_p2),64));

    tmp_39_i_fu_517_p2 <= std_logic_vector(unsigned(tmp_37_i_fu_500_p2) + unsigned(ap_const_lv5_2));
    tmp_3_cast_i_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_reg_246),7));
    tmp_3_fu_394_p1 <= cols(6 - 1 downto 0);
    tmp_3_i_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_reg_246),64));
    tmp_40_cast_i_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_i_fu_542_p2),64));
    tmp_40_i_fu_542_p2 <= std_logic_vector(unsigned(tmp_3_cast_i_fu_538_p1) + unsigned(ap_const_lv7_20));
    tmp_41_i_fu_562_p3 <= (ap_const_lv58_1 & col_i_reg_246);
    tmp_42_i_fu_624_p3 <= (i_i_reg_329 & ap_const_lv2_0);
    tmp_43_i_fu_636_p2 <= std_logic_vector(unsigned(p_shl1_cast_i_fu_632_p1) - unsigned(tmp_25_cast_i_fu_620_p1));
        tmp_44_cast_i_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_i_fu_712_p2),64));

    tmp_44_i_fu_712_p2 <= std_logic_vector(unsigned(tmp_43_i_reg_915) + unsigned(tmp_29_cast_i_fu_708_p1));
    tmp_4_i_fu_439_p2 <= "1" when (unsigned(row_i_reg_235) < unsigned(tmp_fu_390_p1)) else "0";
    tmp_5_i_fu_444_p2 <= "1" when (output_row_fu_433_p2 = ap_const_lv6_0) else "0";
    tmp_6_fu_648_p1 <= x_dir_i_reg_317(8 - 1 downto 0);
    tmp_6_i_fu_450_p2 <= "1" when (output_row_fu_433_p2 = tmp_1_i_fu_398_p2) else "0";
    tmp_7_fu_672_p1 <= y_dir_i_reg_305(8 - 1 downto 0);
    tmp_8_i_fu_528_p2 <= "1" when (unsigned(col_i_reg_246) < unsigned(tmp_3_fu_394_p1)) else "0";
    tmp_cast_i_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i_reg_258),5));
    tmp_fu_390_p1 <= rows(6 - 1 downto 0);

    window_buffer_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, tmp_38_cast_i_fu_512_p1, tmp_37_cast_i_fu_553_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_buffer_address0 <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            window_buffer_address0 <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            window_buffer_address0 <= tmp_37_cast_i_fu_553_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            window_buffer_address0 <= tmp_38_cast_i_fu_512_p1(4 - 1 downto 0);
        else 
            window_buffer_address0 <= "XXXX";
        end if; 
    end process;


    window_buffer_address1_assign_proc : process(ap_CS_fsm_state4, window_buffer_addr_reg_858, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state8, tmp_39_cast_i_fu_523_p1, tmp_44_cast_i_fu_717_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            window_buffer_address1 <= tmp_44_cast_i_fu_717_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_buffer_address1 <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            window_buffer_address1 <= window_buffer_addr_reg_858;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            window_buffer_address1 <= tmp_39_cast_i_fu_523_p1(4 - 1 downto 0);
        else 
            window_buffer_address1 <= "XXXX";
        end if; 
    end process;


    window_buffer_ce0_assign_proc : process(img_0_data_stream_0_empty_n, ap_CS_fsm_state7, or_cond_i_reg_869, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state7) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n)))) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            window_buffer_ce0 <= ap_const_logic_1;
        else 
            window_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_buffer_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            window_buffer_ce1 <= ap_const_logic_1;
        else 
            window_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    window_buffer_d0_assign_proc : process(window_buffer_q0, ap_CS_fsm_state7, ap_CS_fsm_state5, storemerge5_i_phi_fu_273_p4, storemerge_i_reg_293, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_buffer_d0 <= storemerge_i_reg_293;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            window_buffer_d0 <= storemerge5_i_phi_fu_273_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            window_buffer_d0 <= window_buffer_q0;
        else 
            window_buffer_d0 <= "XXXXXXXX";
        end if; 
    end process;


    window_buffer_d1_assign_proc : process(window_buffer_q1, ap_CS_fsm_state5, storemerge1_i_reg_281, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_buffer_d1 <= storemerge1_i_reg_281;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            window_buffer_d1 <= window_buffer_q1;
        else 
            window_buffer_d1 <= "XXXXXXXX";
        end if; 
    end process;


    window_buffer_we0_assign_proc : process(img_0_data_stream_0_empty_n, ap_CS_fsm_state7, or_cond_i_reg_869, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and not(((or_cond_i_reg_869 = ap_const_lv1_1) and (ap_const_logic_0 = img_0_data_stream_0_empty_n)))) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            window_buffer_we0 <= ap_const_logic_1;
        else 
            window_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    window_buffer_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            window_buffer_we1 <= ap_const_logic_1;
        else 
            window_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
