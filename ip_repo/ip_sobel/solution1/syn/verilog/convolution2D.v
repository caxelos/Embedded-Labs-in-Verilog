// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        posy,
        posx,
        input_img_address0,
        input_img_ce0,
        input_img_q0,
        operator_address0,
        operator_ce0,
        operator_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] posy;
input  [9:0] posx;
output  [19:0] input_img_address0;
output   input_img_ce0;
input  [7:0] input_img_q0;
output  [3:0] operator_address0;
output   operator_ce0;
input  [31:0] operator_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_img_ce0;
reg operator_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [21:0] j_cast_fu_102_p1;
reg  signed [21:0] j_cast_reg_230;
wire    ap_CS_fsm_state2;
wire   [2:0] j_2_fu_112_p2;
reg   [2:0] j_2_reg_238;
wire   [0:0] exitcond1_fu_106_p2;
wire   [4:0] tmp_cast_fu_118_p1;
reg   [4:0] tmp_cast_reg_243;
wire   [21:0] tmp_s_fu_148_p2;
reg   [21:0] tmp_s_reg_251;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_122_p2;
wire   [2:0] i_2_fu_153_p2;
reg   [2:0] i_2_reg_256;
wire   [4:0] tmp_11_fu_177_p2;
reg   [4:0] tmp_11_reg_261;
wire    ap_CS_fsm_state4;
reg   [7:0] input_img_load_reg_271;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_197_p2;
reg   [31:0] tmp_6_reg_291;
wire    ap_CS_fsm_state8;
reg   [2:0] j_reg_72;
reg   [2:0] i_reg_83;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_2_fu_185_p1;
wire  signed [63:0] tmp_16_cast_fu_190_p1;
reg   [31:0] res_fu_32;
wire   [31:0] res_1_fu_203_p2;
wire  signed [9:0] tmp_3_cast_fu_128_p1;
wire   [9:0] tmp_5_fu_132_p2;
wire   [19:0] tmp1_fu_137_p3;
wire   [21:0] tmp1_cast_cast_fu_144_p1;
wire   [4:0] tmp_9_fu_163_p3;
wire   [4:0] tmp_4_cast_fu_159_p1;
wire   [4:0] tmp_10_fu_171_p2;
wire  signed [31:0] tmp_cast_11_fu_182_p1;
wire   [7:0] grp_fu_197_p0;
reg   [8:0] ap_NS_fsm;
wire   [31:0] grp_fu_197_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

ip_sobel_mul_8ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ip_sobel_mul_8ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_197_p0),
    .din1(operator_q0),
    .ce(1'b1),
    .dout(grp_fu_197_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_106_p2 == 1'd0))) begin
        i_reg_83 <= 3'd7;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_83 <= i_2_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_122_p2 == 1'd1))) begin
        j_reg_72 <= j_2_reg_238;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_72 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        res_fu_32 <= res_1_fu_203_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        res_fu_32 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_122_p2))) begin
        i_2_reg_256 <= i_2_fu_153_p2;
        tmp_11_reg_261 <= tmp_11_fu_177_p2;
        tmp_s_reg_251 <= tmp_s_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_img_load_reg_271 <= input_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_106_p2 == 1'd0))) begin
        j_2_reg_238 <= j_2_fu_112_p2;
        tmp_cast_reg_243[2 : 0] <= tmp_cast_fu_118_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_cast_reg_230 <= j_cast_fu_102_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_6_reg_291 <= grp_fu_197_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_106_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_106_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_img_ce0 = 1'b1;
    end else begin
        input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        operator_ce0 = 1'b1;
    end else begin
        operator_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_106_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_122_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = res_fu_32;

assign exitcond1_fu_106_p2 = ((j_reg_72 == 3'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_122_p2 = ((i_reg_83 == 3'd2) ? 1'b1 : 1'b0);

assign grp_fu_197_p0 = grp_fu_197_p00;

assign grp_fu_197_p00 = input_img_load_reg_271;

assign i_2_fu_153_p2 = (i_reg_83 + 3'd1);

assign input_img_address0 = tmp_2_fu_185_p1;

assign j_2_fu_112_p2 = (j_reg_72 + 3'd1);

assign j_cast_fu_102_p1 = $signed(j_reg_72);

assign operator_address0 = tmp_16_cast_fu_190_p1;

assign res_1_fu_203_p2 = (res_fu_32 + tmp_6_reg_291);

assign tmp1_cast_cast_fu_144_p1 = tmp1_fu_137_p3;

assign tmp1_fu_137_p3 = {{tmp_5_fu_132_p2}, {posx}};

assign tmp_10_fu_171_p2 = (tmp_9_fu_163_p3 - tmp_4_cast_fu_159_p1);

assign tmp_11_fu_177_p2 = (tmp_10_fu_171_p2 + tmp_cast_reg_243);

assign tmp_16_cast_fu_190_p1 = $signed(tmp_11_reg_261);

assign tmp_2_fu_185_p1 = $unsigned(tmp_cast_11_fu_182_p1);

assign tmp_3_cast_fu_128_p1 = $signed(i_reg_83);

assign tmp_4_cast_fu_159_p1 = i_2_fu_153_p2;

assign tmp_5_fu_132_p2 = ($signed(posy) + $signed(tmp_3_cast_fu_128_p1));

assign tmp_9_fu_163_p3 = {{i_2_fu_153_p2}, {2'd0}};

assign tmp_cast_11_fu_182_p1 = $signed(tmp_s_reg_251);

assign tmp_cast_fu_118_p1 = j_2_fu_112_p2;

assign tmp_s_fu_148_p2 = ($signed(j_cast_reg_230) + $signed(tmp1_cast_cast_fu_144_p1));

always @ (posedge ap_clk) begin
    tmp_cast_reg_243[4:3] <= 2'b00;
end

endmodule //convolution2D
