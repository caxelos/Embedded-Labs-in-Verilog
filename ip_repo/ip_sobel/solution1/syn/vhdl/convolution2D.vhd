-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    posy : IN STD_LOGIC_VECTOR (9 downto 0);
    posx : IN STD_LOGIC_VECTOR (9 downto 0);
    input_img_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    input_img_ce0 : OUT STD_LOGIC;
    input_img_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    operator_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    operator_ce0 : OUT STD_LOGIC;
    operator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution2D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_cast_fu_102_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal j_cast_reg_230 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_2_fu_112_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_238 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_118_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_reg_243 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_148_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_s_reg_251 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_153_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_256 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_177_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_reg_261 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_img_load_reg_271 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_reg_72 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_83 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_2_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_fu_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_1_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_fu_128_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_132_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_137_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp1_cast_cast_fu_144_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_9_fu_163_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_cast_fu_159_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_171_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_11_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_197_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component ip_sobel_mul_8ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ip_sobel_mul_8ns_bkb_U1 : component ip_sobel_mul_8ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_197_p0,
        din1 => operator_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_106_p2 = ap_const_lv1_0))) then 
                i_reg_83 <= ap_const_lv3_7;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_83 <= i_2_reg_256;
            end if; 
        end if;
    end process;

    j_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_122_p2 = ap_const_lv1_1))) then 
                j_reg_72 <= j_2_reg_238;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_72 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    res_fu_32_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                res_fu_32 <= res_1_fu_203_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                res_fu_32 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_122_p2))) then
                i_2_reg_256 <= i_2_fu_153_p2;
                tmp_11_reg_261 <= tmp_11_fu_177_p2;
                tmp_s_reg_251 <= tmp_s_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_img_load_reg_271 <= input_img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_106_p2 = ap_const_lv1_0))) then
                j_2_reg_238 <= j_2_fu_112_p2;
                    tmp_cast_reg_243(2 downto 0) <= tmp_cast_fu_118_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_cast_reg_230 <= j_cast_fu_102_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_6_reg_291 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_243(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_106_p2, ap_CS_fsm_state3, exitcond_fu_122_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_106_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_122_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_106_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_106_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_106_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_106_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= res_fu_32;
    exitcond1_fu_106_p2 <= "1" when (j_reg_72 = ap_const_lv3_2) else "0";
    exitcond_fu_122_p2 <= "1" when (i_reg_83 = ap_const_lv3_2) else "0";
    grp_fu_197_p0 <= grp_fu_197_p00(8 - 1 downto 0);
    grp_fu_197_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_img_load_reg_271),32));
    i_2_fu_153_p2 <= std_logic_vector(unsigned(i_reg_83) + unsigned(ap_const_lv3_1));
    input_img_address0 <= tmp_2_fu_185_p1(20 - 1 downto 0);

    input_img_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_img_ce0 <= ap_const_logic_1;
        else 
            input_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_112_p2 <= std_logic_vector(unsigned(j_reg_72) + unsigned(ap_const_lv3_1));
        j_cast_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_reg_72),22));

    operator_address0 <= tmp_16_cast_fu_190_p1(4 - 1 downto 0);

    operator_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            operator_ce0 <= ap_const_logic_1;
        else 
            operator_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_fu_203_p2 <= std_logic_vector(unsigned(res_fu_32) + unsigned(tmp_6_reg_291));
    tmp1_cast_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_137_p3),22));
    tmp1_fu_137_p3 <= (tmp_5_fu_132_p2 & posx);
    tmp_10_fu_171_p2 <= std_logic_vector(unsigned(tmp_9_fu_163_p3) - unsigned(tmp_4_cast_fu_159_p1));
    tmp_11_fu_177_p2 <= std_logic_vector(unsigned(tmp_10_fu_171_p2) + unsigned(tmp_cast_reg_243));
        tmp_16_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_261),64));

    tmp_2_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_11_fu_182_p1),64));
        tmp_3_cast_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_reg_83),10));

    tmp_4_cast_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_153_p2),5));
    tmp_5_fu_132_p2 <= std_logic_vector(unsigned(posy) + unsigned(tmp_3_cast_fu_128_p1));
    tmp_9_fu_163_p3 <= (i_2_fu_153_p2 & ap_const_lv2_0);
        tmp_cast_11_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_251),32));

    tmp_cast_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_fu_112_p2),5));
    tmp_s_fu_148_p2 <= std_logic_vector(signed(j_cast_reg_230) + signed(tmp1_cast_cast_fu_144_p1));
end behav;
