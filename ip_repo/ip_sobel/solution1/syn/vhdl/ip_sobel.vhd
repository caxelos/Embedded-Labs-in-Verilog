-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip_sobel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_img_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    input_img_ce0 : OUT STD_LOGIC;
    input_img_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_img_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    output_img_ce0 : OUT STD_LOGIC;
    output_img_we0 : OUT STD_LOGIC;
    output_img_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of ip_sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ip_sobel,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.730812,HLS_SYN_LAT=195320553,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=3896,HLS_SYN_LUT=4373}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (48 downto 0) := "0000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (48 downto 0) := "0000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (48 downto 0) := "0000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (48 downto 0) := "0000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (48 downto 0) := "0000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (48 downto 0) := "0000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (48 downto 0) := "0001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (48 downto 0) := "0010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (48 downto 0) := "0100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (48 downto 0) := "1000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal horiz_operator_ce0 : STD_LOGIC;
    signal horiz_operator_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vert_operator_ce0 : STD_LOGIC;
    signal vert_operator_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_153_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution2D_fu_119_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_convolution2D_fu_119_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_406 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_411 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal p_Result_s_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal loc_V_1_fu_194_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_421 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_fu_208_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_226_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_reg_431 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_3_fu_292_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_3_reg_436 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal i_1_fu_362_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_convolution2D_fu_119_ap_start : STD_LOGIC;
    signal grp_convolution2D_fu_119_ap_idle : STD_LOGIC;
    signal grp_convolution2D_fu_119_ap_ready : STD_LOGIC;
    signal grp_convolution2D_fu_119_input_img_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_convolution2D_fu_119_input_img_ce0 : STD_LOGIC;
    signal grp_convolution2D_fu_119_operator_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution2D_fu_119_operator_ce0 : STD_LOGIC;
    signal grp_convolution2D_fu_119_operator_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_95 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_107 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_convolution2D_fu_119_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_9_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Val2_1_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_fu_184_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast1_fu_198_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_202_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_i_i_i_fu_216_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_i_i_i_cast_fu_222_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_fu_234_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_assign_1_cast_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_i_i_cast_fu_254_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_cast_fu_243_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_14_i_i_i_fu_250_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_15_i_i_i_fu_258_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_270_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_i_i_fu_264_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_4_fu_278_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_282_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_i_i_i_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_i_i_i_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_315_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_336_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_fu_349_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_159_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_163_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (48 downto 0);

    component convolution2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        posy : IN STD_LOGIC_VECTOR (9 downto 0);
        posx : IN STD_LOGIC_VECTOR (9 downto 0);
        input_img_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        input_img_ce0 : OUT STD_LOGIC;
        input_img_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        operator_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        operator_ce0 : OUT STD_LOGIC;
        operator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_sobel_uitodp_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ip_sobel_dsqrt_64fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ip_sobel_mul_32s_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_sobel_horiz_opcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_sobel_vert_opedEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    horiz_operator_U : component ip_sobel_horiz_opcud
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_convolution2D_fu_119_operator_address0,
        ce0 => horiz_operator_ce0,
        q0 => horiz_operator_q0);

    vert_operator_U : component ip_sobel_vert_opedEe
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_convolution2D_fu_119_operator_address0,
        ce0 => vert_operator_ce0,
        q0 => vert_operator_q0);

    grp_convolution2D_fu_119 : component convolution2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution2D_fu_119_ap_start,
        ap_done => grp_convolution2D_fu_119_ap_done,
        ap_idle => grp_convolution2D_fu_119_ap_idle,
        ap_ready => grp_convolution2D_fu_119_ap_ready,
        posy => i_reg_107,
        posx => j_reg_95,
        input_img_address0 => grp_convolution2D_fu_119_input_img_address0,
        input_img_ce0 => grp_convolution2D_fu_119_input_img_ce0,
        input_img_q0 => input_img_q0,
        operator_address0 => grp_convolution2D_fu_119_operator_address0,
        operator_ce0 => grp_convolution2D_fu_119_operator_ce0,
        operator_q0 => grp_convolution2D_fu_119_operator_q0,
        ap_return => grp_convolution2D_fu_119_ap_return);

    ip_sobel_uitodp_3eOg_U6 : component ip_sobel_uitodp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_reg_401,
        ce => ap_const_logic_1,
        dout => grp_fu_133_p1);

    ip_sobel_dsqrt_64fYi_U7 : component ip_sobel_dsqrt_64fYi
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => tmp_6_reg_406,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p2);

    ip_sobel_mul_32s_g8j_U8 : component ip_sobel_mul_32s_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp1_reg_379,
        din1 => tmp1_reg_379,
        ce => grp_fu_159_ce,
        dout => grp_fu_159_p2);

    ip_sobel_mul_32s_g8j_U9 : component ip_sobel_mul_32s_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_convolution2D_fu_119_ap_return,
        din1 => grp_convolution2D_fu_119_ap_return,
        ce => grp_fu_163_ce,
        dout => grp_fu_163_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_convolution2D_fu_119_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_convolution2D_fu_119_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_147_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_reg_grp_convolution2D_fu_119_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_convolution2D_fu_119_ap_ready)) then 
                    ap_reg_grp_convolution2D_fu_119_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_141_p2 = ap_const_lv1_0))) then 
                i_reg_107 <= ap_const_lv10_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                i_reg_107 <= i_1_fu_362_p2;
            end if; 
        end if;
    end process;

    j_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_147_p2 = ap_const_lv1_1))) then 
                j_reg_95 <= j_1_fu_153_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_95 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                isNeg_reg_426 <= sh_assign_fu_202_p2(11 downto 11);
                loc_V_1_reg_421 <= loc_V_1_fu_194_p1;
                p_Result_s_reg_416 <= p_Val2_1_fu_173_p1(63 downto 63);
                sh_assign_1_reg_431 <= sh_assign_1_fu_226_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                p_Val2_3_reg_436 <= p_Val2_3_fu_292_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_reg_401 <= p_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_convolution2D_fu_119_ap_done = ap_const_logic_1))) then
                tmp1_reg_379 <= grp_convolution2D_fu_119_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_2_reg_391 <= grp_fu_159_p2;
                tmp_5_reg_396 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_6_reg_406 <= grp_fu_133_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                x_assign_reg_411 <= grp_fu_136_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_147_p2, ap_CS_fsm_state4, grp_convolution2D_fu_119_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state2, exitcond1_fu_141_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_141_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_147_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_convolution2D_fu_119_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_convolution2D_fu_119_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_141_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_141_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_141_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_141_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_141_p2 <= "1" when (j_reg_95 = ap_const_lv10_3FF) else "0";
    exitcond_fu_147_p2 <= "1" when (i_reg_107 = ap_const_lv10_3FF) else "0";
    grp_convolution2D_fu_119_ap_start <= ap_reg_grp_convolution2D_fu_119_ap_start;

    grp_convolution2D_fu_119_operator_q0_assign_proc : process(horiz_operator_q0, vert_operator_q0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_convolution2D_fu_119_operator_q0 <= vert_operator_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_convolution2D_fu_119_operator_q0 <= horiz_operator_q0;
        else 
            grp_convolution2D_fu_119_operator_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_159_ce_assign_proc : process(grp_convolution2D_fu_119_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((((grp_convolution2D_fu_119_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_159_ce <= ap_const_logic_1;
        else 
            grp_fu_159_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_163_ce_assign_proc : process(grp_convolution2D_fu_119_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((((grp_convolution2D_fu_119_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_163_ce <= ap_const_logic_1;
        else 
            grp_fu_163_ce <= ap_const_logic_0;
        end if; 
    end process;


    horiz_operator_ce0_assign_proc : process(ap_CS_fsm_state4, grp_convolution2D_fu_119_operator_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            horiz_operator_ce0 <= grp_convolution2D_fu_119_operator_ce0;
        else 
            horiz_operator_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_362_p2 <= std_logic_vector(unsigned(i_reg_107) + unsigned(ap_const_lv10_1));
    icmp_fu_325_p2 <= "1" when (signed(tmp_10_fu_315_p4) > signed(ap_const_lv24_0)) else "0";
    input_img_address0 <= grp_convolution2D_fu_119_input_img_address0;

    input_img_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_convolution2D_fu_119_input_img_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_img_ce0 <= grp_convolution2D_fu_119_input_img_ce0;
        else 
            input_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_208_p3 <= sh_assign_fu_202_p2(11 downto 11);
    j_1_fu_153_p2 <= std_logic_vector(unsigned(j_reg_95) + unsigned(ap_const_lv10_1));
    loc_V_1_fu_194_p1 <= p_Val2_1_fu_173_p1(52 - 1 downto 0);
    loc_V_fu_184_p4 <= p_Val2_1_fu_173_p1(62 downto 52);

    output_img_address0_assign_proc : process(ap_CS_fsm_state49, tmp_9_fu_344_p1, icmp_fu_325_p2, tmp_3_fu_357_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
            if ((ap_const_lv1_1 = icmp_fu_325_p2)) then 
                output_img_address0 <= tmp_3_fu_357_p1(20 - 1 downto 0);
            elsif ((ap_const_lv1_0 = icmp_fu_325_p2)) then 
                output_img_address0 <= tmp_9_fu_344_p1(20 - 1 downto 0);
            else 
                output_img_address0 <= "XXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_img_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_img_ce0_assign_proc : process(ap_CS_fsm_state49, icmp_fu_325_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = icmp_fu_325_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_1 = icmp_fu_325_p2)))) then 
            output_img_ce0 <= ap_const_logic_1;
        else 
            output_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_img_d0_assign_proc : process(ap_CS_fsm_state49, icmp_fu_325_p2, tmp_11_fu_331_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
            if ((ap_const_lv1_1 = icmp_fu_325_p2)) then 
                output_img_d0 <= ap_const_lv8_FF;
            elsif ((ap_const_lv1_0 = icmp_fu_325_p2)) then 
                output_img_d0 <= tmp_11_fu_331_p1;
            else 
                output_img_d0 <= "XXXXXXXX";
            end if;
        else 
            output_img_d0 <= "XXXXXXXX";
        end if; 
    end process;


    output_img_we0_assign_proc : process(ap_CS_fsm_state49, icmp_fu_325_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = icmp_fu_325_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_1 = icmp_fu_325_p2)))) then 
            output_img_we0 <= ap_const_logic_1;
        else 
            output_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_173_p1 <= x_assign_reg_411;
    p_Val2_3_fu_292_p3 <= 
        tmp_4_fu_278_p1 when (isNeg_reg_426(0) = '1') else 
        tmp_8_fu_282_p4;
    p_Val2_s_fu_308_p3 <= 
        tmp_21_i_i_i_fu_302_p2 when (p_Result_s_reg_416(0) = '1') else 
        tmp_18_i_i_i_fu_299_p1;
    p_fu_169_p2 <= std_logic_vector(unsigned(tmp_5_reg_396) + unsigned(tmp_2_reg_391));
        sh_assign_1_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_431),32));

    sh_assign_1_fu_226_p3 <= 
        tmp_13_i_i_i_cast_fu_222_p1 when (isNeg_fu_208_p3(0) = '1') else 
        sh_assign_fu_202_p2;
    sh_assign_fu_202_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast1_fu_198_p1));
    tmp_10_fu_315_p4 <= p_Val2_s_fu_308_p3(31 downto 8);
    tmp_11_fu_331_p1 <= p_Val2_s_fu_308_p3(8 - 1 downto 0);
        tmp_13_i_i_i_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_i_i_i_fu_216_p2),12));

    tmp_13_i_i_i_fu_216_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_184_p4));
    tmp_14_i_i_i_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_247_p1),54));
    tmp_14_i_i_i_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_247_p1),137));
    tmp_15_i_i_i_fu_258_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_fu_234_p4),to_integer(unsigned('0' & tmp_14_i_i_i_cast_fu_254_p1(31-1 downto 0)))));
    tmp_16_i_i_i_fu_264_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_cast_fu_243_p1),to_integer(unsigned('0' & tmp_14_i_i_i_fu_250_p1(31-1 downto 0)))));
    tmp_18_i_i_i_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_reg_436),32));
    tmp_21_i_i_i_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_18_i_i_i_fu_299_p1));
    tmp_3_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_349_p3),64));
    tmp_4_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_270_p3),31));
    tmp_7_fu_336_p3 <= (i_reg_107 & j_reg_95);
    tmp_8_fu_282_p4 <= tmp_16_i_i_i_fu_264_p2(83 downto 53);
    tmp_9_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_336_p3),64));
    tmp_fu_270_p3 <= tmp_15_i_i_i_fu_258_p2(53 downto 53);
    tmp_i_i_i_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_234_p4),137));
    tmp_i_i_i_fu_234_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_421) & ap_const_lv1_0);
    tmp_i_i_i_i_cast1_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_184_p4),12));
    tmp_s_fu_349_p3 <= (i_reg_107 & j_reg_95);

    vert_operator_ce0_assign_proc : process(ap_CS_fsm_state6, grp_convolution2D_fu_119_operator_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            vert_operator_ce0 <= grp_convolution2D_fu_119_operator_ce0;
        else 
            vert_operator_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
