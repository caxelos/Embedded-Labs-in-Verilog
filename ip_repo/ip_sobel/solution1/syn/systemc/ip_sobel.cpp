// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ip_sobel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ip_sobel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ip_sobel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<49> ip_sobel::ap_ST_fsm_state1 = "1";
const sc_lv<49> ip_sobel::ap_ST_fsm_state2 = "10";
const sc_lv<49> ip_sobel::ap_ST_fsm_state3 = "100";
const sc_lv<49> ip_sobel::ap_ST_fsm_state4 = "1000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state5 = "10000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state6 = "100000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state7 = "1000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state8 = "10000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state9 = "100000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state10 = "1000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state11 = "10000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state12 = "100000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<49> ip_sobel::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<32> ip_sobel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> ip_sobel::ap_const_lv32_2 = "10";
const sc_lv<1> ip_sobel::ap_const_lv1_1 = "1";
const sc_lv<32> ip_sobel::ap_const_lv32_3 = "11";
const sc_lv<32> ip_sobel::ap_const_lv32_5 = "101";
const sc_lv<32> ip_sobel::ap_const_lv32_7 = "111";
const sc_lv<32> ip_sobel::ap_const_lv32_8 = "1000";
const sc_lv<32> ip_sobel::ap_const_lv32_E = "1110";
const sc_lv<32> ip_sobel::ap_const_lv32_2D = "101101";
const sc_lv<32> ip_sobel::ap_const_lv32_2E = "101110";
const sc_lv<32> ip_sobel::ap_const_lv32_2F = "101111";
const sc_lv<32> ip_sobel::ap_const_lv32_30 = "110000";
const sc_lv<10> ip_sobel::ap_const_lv10_1 = "1";
const sc_lv<32> ip_sobel::ap_const_lv32_1 = "1";
const sc_lv<1> ip_sobel::ap_const_lv1_0 = "0";
const sc_lv<32> ip_sobel::ap_const_lv32_4 = "100";
const sc_lv<8> ip_sobel::ap_const_lv8_FF = "11111111";
const sc_lv<32> ip_sobel::ap_const_lv32_9 = "1001";
const sc_lv<32> ip_sobel::ap_const_lv32_F = "1111";
const sc_lv<10> ip_sobel::ap_const_lv10_3FF = "1111111111";
const sc_lv<32> ip_sobel::ap_const_lv32_3F = "111111";
const sc_lv<32> ip_sobel::ap_const_lv32_34 = "110100";
const sc_lv<32> ip_sobel::ap_const_lv32_3E = "111110";
const sc_lv<12> ip_sobel::ap_const_lv12_C01 = "110000000001";
const sc_lv<32> ip_sobel::ap_const_lv32_B = "1011";
const sc_lv<11> ip_sobel::ap_const_lv11_3FF = "1111111111";
const sc_lv<32> ip_sobel::ap_const_lv32_35 = "110101";
const sc_lv<32> ip_sobel::ap_const_lv32_53 = "1010011";
const sc_lv<32> ip_sobel::ap_const_lv32_1F = "11111";
const sc_lv<24> ip_sobel::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<32> ip_sobel::ap_const_lv32_6 = "110";
const sc_lv<64> ip_sobel::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool ip_sobel::ap_const_boolean_1 = true;

ip_sobel::ip_sobel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    horiz_operator_U = new ip_sobel_horiz_opcud("horiz_operator_U");
    horiz_operator_U->clk(ap_clk);
    horiz_operator_U->reset(ap_rst);
    horiz_operator_U->address0(grp_convolution2D_fu_119_operator_address0);
    horiz_operator_U->ce0(horiz_operator_ce0);
    horiz_operator_U->q0(horiz_operator_q0);
    vert_operator_U = new ip_sobel_vert_opedEe("vert_operator_U");
    vert_operator_U->clk(ap_clk);
    vert_operator_U->reset(ap_rst);
    vert_operator_U->address0(grp_convolution2D_fu_119_operator_address0);
    vert_operator_U->ce0(vert_operator_ce0);
    vert_operator_U->q0(vert_operator_q0);
    grp_convolution2D_fu_119 = new convolution2D("grp_convolution2D_fu_119");
    grp_convolution2D_fu_119->ap_clk(ap_clk);
    grp_convolution2D_fu_119->ap_rst(ap_rst);
    grp_convolution2D_fu_119->ap_start(grp_convolution2D_fu_119_ap_start);
    grp_convolution2D_fu_119->ap_done(grp_convolution2D_fu_119_ap_done);
    grp_convolution2D_fu_119->ap_idle(grp_convolution2D_fu_119_ap_idle);
    grp_convolution2D_fu_119->ap_ready(grp_convolution2D_fu_119_ap_ready);
    grp_convolution2D_fu_119->posy(i_reg_107);
    grp_convolution2D_fu_119->posx(j_reg_95);
    grp_convolution2D_fu_119->input_img_address0(grp_convolution2D_fu_119_input_img_address0);
    grp_convolution2D_fu_119->input_img_ce0(grp_convolution2D_fu_119_input_img_ce0);
    grp_convolution2D_fu_119->input_img_q0(input_img_q0);
    grp_convolution2D_fu_119->operator_address0(grp_convolution2D_fu_119_operator_address0);
    grp_convolution2D_fu_119->operator_ce0(grp_convolution2D_fu_119_operator_ce0);
    grp_convolution2D_fu_119->operator_q0(grp_convolution2D_fu_119_operator_q0);
    grp_convolution2D_fu_119->ap_return(grp_convolution2D_fu_119_ap_return);
    ip_sobel_uitodp_3eOg_U6 = new ip_sobel_uitodp_3eOg<1,6,32,64>("ip_sobel_uitodp_3eOg_U6");
    ip_sobel_uitodp_3eOg_U6->clk(ap_clk);
    ip_sobel_uitodp_3eOg_U6->reset(ap_rst);
    ip_sobel_uitodp_3eOg_U6->din0(p_reg_401);
    ip_sobel_uitodp_3eOg_U6->ce(ap_var_for_const0);
    ip_sobel_uitodp_3eOg_U6->dout(grp_fu_133_p1);
    ip_sobel_dsqrt_64fYi_U7 = new ip_sobel_dsqrt_64fYi<1,31,64,64,64>("ip_sobel_dsqrt_64fYi_U7");
    ip_sobel_dsqrt_64fYi_U7->clk(ap_clk);
    ip_sobel_dsqrt_64fYi_U7->reset(ap_rst);
    ip_sobel_dsqrt_64fYi_U7->din0(ap_var_for_const1);
    ip_sobel_dsqrt_64fYi_U7->din1(tmp_6_reg_406);
    ip_sobel_dsqrt_64fYi_U7->ce(ap_var_for_const0);
    ip_sobel_dsqrt_64fYi_U7->dout(grp_fu_136_p2);
    ip_sobel_mul_32s_g8j_U8 = new ip_sobel_mul_32s_g8j<1,3,32,32,32>("ip_sobel_mul_32s_g8j_U8");
    ip_sobel_mul_32s_g8j_U8->clk(ap_clk);
    ip_sobel_mul_32s_g8j_U8->reset(ap_rst);
    ip_sobel_mul_32s_g8j_U8->din0(tmp1_reg_379);
    ip_sobel_mul_32s_g8j_U8->din1(tmp1_reg_379);
    ip_sobel_mul_32s_g8j_U8->ce(grp_fu_159_ce);
    ip_sobel_mul_32s_g8j_U8->dout(grp_fu_159_p2);
    ip_sobel_mul_32s_g8j_U9 = new ip_sobel_mul_32s_g8j<1,3,32,32,32>("ip_sobel_mul_32s_g8j_U9");
    ip_sobel_mul_32s_g8j_U9->clk(ap_clk);
    ip_sobel_mul_32s_g8j_U9->reset(ap_rst);
    ip_sobel_mul_32s_g8j_U9->din0(grp_convolution2D_fu_119_ap_return);
    ip_sobel_mul_32s_g8j_U9->din1(grp_convolution2D_fu_119_ap_return);
    ip_sobel_mul_32s_g8j_U9->ce(grp_fu_163_ce);
    ip_sobel_mul_32s_g8j_U9->dout(grp_fu_163_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_141_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_141_p2 );

    SC_METHOD(thread_exitcond1_fu_141_p2);
    sensitive << ( j_reg_95 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_exitcond_fu_147_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_107 );

    SC_METHOD(thread_grp_convolution2D_fu_119_ap_start);
    sensitive << ( ap_reg_grp_convolution2D_fu_119_ap_start );

    SC_METHOD(thread_grp_convolution2D_fu_119_operator_q0);
    sensitive << ( horiz_operator_q0 );
    sensitive << ( vert_operator_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_159_ce);
    sensitive << ( grp_convolution2D_fu_119_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_fu_163_ce);
    sensitive << ( grp_convolution2D_fu_119_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_horiz_operator_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_convolution2D_fu_119_operator_ce0 );

    SC_METHOD(thread_i_1_fu_362_p2);
    sensitive << ( i_reg_107 );

    SC_METHOD(thread_icmp_fu_325_p2);
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( tmp_10_fu_315_p4 );

    SC_METHOD(thread_input_img_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_convolution2D_fu_119_input_img_address0 );

    SC_METHOD(thread_input_img_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_convolution2D_fu_119_input_img_ce0 );

    SC_METHOD(thread_isNeg_fu_208_p3);
    sensitive << ( sh_assign_fu_202_p2 );

    SC_METHOD(thread_j_1_fu_153_p2);
    sensitive << ( j_reg_95 );

    SC_METHOD(thread_loc_V_1_fu_194_p1);
    sensitive << ( p_Val2_1_fu_173_p1 );

    SC_METHOD(thread_loc_V_fu_184_p4);
    sensitive << ( p_Val2_1_fu_173_p1 );

    SC_METHOD(thread_output_img_address0);
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( tmp_9_fu_344_p1 );
    sensitive << ( icmp_fu_325_p2 );
    sensitive << ( tmp_3_fu_357_p1 );

    SC_METHOD(thread_output_img_ce0);
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( icmp_fu_325_p2 );

    SC_METHOD(thread_output_img_d0);
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( icmp_fu_325_p2 );
    sensitive << ( tmp_11_fu_331_p1 );

    SC_METHOD(thread_output_img_we0);
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( icmp_fu_325_p2 );

    SC_METHOD(thread_p_Val2_1_fu_173_p1);
    sensitive << ( x_assign_reg_411 );

    SC_METHOD(thread_p_Val2_3_fu_292_p3);
    sensitive << ( isNeg_reg_426 );
    sensitive << ( tmp_4_fu_278_p1 );
    sensitive << ( tmp_8_fu_282_p4 );

    SC_METHOD(thread_p_Val2_s_fu_308_p3);
    sensitive << ( p_Result_s_reg_416 );
    sensitive << ( tmp_18_i_i_i_fu_299_p1 );
    sensitive << ( tmp_21_i_i_i_fu_302_p2 );

    SC_METHOD(thread_p_fu_169_p2);
    sensitive << ( tmp_2_reg_391 );
    sensitive << ( tmp_5_reg_396 );

    SC_METHOD(thread_sh_assign_1_cast_fu_247_p1);
    sensitive << ( sh_assign_1_reg_431 );

    SC_METHOD(thread_sh_assign_1_fu_226_p3);
    sensitive << ( isNeg_fu_208_p3 );
    sensitive << ( sh_assign_fu_202_p2 );
    sensitive << ( tmp_13_i_i_i_cast_fu_222_p1 );

    SC_METHOD(thread_sh_assign_fu_202_p2);
    sensitive << ( tmp_i_i_i_i_cast1_fu_198_p1 );

    SC_METHOD(thread_tmp_10_fu_315_p4);
    sensitive << ( p_Val2_s_fu_308_p3 );

    SC_METHOD(thread_tmp_11_fu_331_p1);
    sensitive << ( p_Val2_s_fu_308_p3 );

    SC_METHOD(thread_tmp_13_i_i_i_cast_fu_222_p1);
    sensitive << ( tmp_13_i_i_i_fu_216_p2 );

    SC_METHOD(thread_tmp_13_i_i_i_fu_216_p2);
    sensitive << ( loc_V_fu_184_p4 );

    SC_METHOD(thread_tmp_14_i_i_i_cast_fu_254_p1);
    sensitive << ( sh_assign_1_cast_fu_247_p1 );

    SC_METHOD(thread_tmp_14_i_i_i_fu_250_p1);
    sensitive << ( sh_assign_1_cast_fu_247_p1 );

    SC_METHOD(thread_tmp_15_i_i_i_fu_258_p2);
    sensitive << ( tmp_i_i_i_fu_234_p4 );
    sensitive << ( tmp_14_i_i_i_cast_fu_254_p1 );

    SC_METHOD(thread_tmp_16_i_i_i_fu_264_p2);
    sensitive << ( tmp_i_i_i_cast_fu_243_p1 );
    sensitive << ( tmp_14_i_i_i_fu_250_p1 );

    SC_METHOD(thread_tmp_18_i_i_i_fu_299_p1);
    sensitive << ( p_Val2_3_reg_436 );

    SC_METHOD(thread_tmp_21_i_i_i_fu_302_p2);
    sensitive << ( tmp_18_i_i_i_fu_299_p1 );

    SC_METHOD(thread_tmp_3_fu_357_p1);
    sensitive << ( tmp_s_fu_349_p3 );

    SC_METHOD(thread_tmp_4_fu_278_p1);
    sensitive << ( tmp_fu_270_p3 );

    SC_METHOD(thread_tmp_7_fu_336_p3);
    sensitive << ( j_reg_95 );
    sensitive << ( i_reg_107 );

    SC_METHOD(thread_tmp_8_fu_282_p4);
    sensitive << ( tmp_16_i_i_i_fu_264_p2 );

    SC_METHOD(thread_tmp_9_fu_344_p1);
    sensitive << ( tmp_7_fu_336_p3 );

    SC_METHOD(thread_tmp_fu_270_p3);
    sensitive << ( tmp_15_i_i_i_fu_258_p2 );

    SC_METHOD(thread_tmp_i_i_i_cast_fu_243_p1);
    sensitive << ( tmp_i_i_i_fu_234_p4 );

    SC_METHOD(thread_tmp_i_i_i_fu_234_p4);
    sensitive << ( loc_V_1_reg_421 );

    SC_METHOD(thread_tmp_i_i_i_i_cast1_fu_198_p1);
    sensitive << ( loc_V_fu_184_p4 );

    SC_METHOD(thread_tmp_s_fu_349_p3);
    sensitive << ( j_reg_95 );
    sensitive << ( i_reg_107 );

    SC_METHOD(thread_vert_operator_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_convolution2D_fu_119_operator_ce0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_147_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_convolution2D_fu_119_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_141_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000001";
    ap_reg_grp_convolution2D_fu_119_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ip_sobel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_img_address0, "(port)input_img_address0");
    sc_trace(mVcdFile, input_img_ce0, "(port)input_img_ce0");
    sc_trace(mVcdFile, input_img_q0, "(port)input_img_q0");
    sc_trace(mVcdFile, output_img_address0, "(port)output_img_address0");
    sc_trace(mVcdFile, output_img_ce0, "(port)output_img_ce0");
    sc_trace(mVcdFile, output_img_we0, "(port)output_img_we0");
    sc_trace(mVcdFile, output_img_d0, "(port)output_img_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, horiz_operator_ce0, "horiz_operator_ce0");
    sc_trace(mVcdFile, horiz_operator_q0, "horiz_operator_q0");
    sc_trace(mVcdFile, vert_operator_ce0, "vert_operator_ce0");
    sc_trace(mVcdFile, vert_operator_q0, "vert_operator_q0");
    sc_trace(mVcdFile, j_1_fu_153_p2, "j_1_fu_153_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_147_p2, "exitcond_fu_147_p2");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_ap_return, "grp_convolution2D_fu_119_ap_return");
    sc_trace(mVcdFile, tmp1_reg_379, "tmp1_reg_379");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_ap_done, "grp_convolution2D_fu_119_ap_done");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_159_p2, "grp_fu_159_p2");
    sc_trace(mVcdFile, tmp_2_reg_391, "tmp_2_reg_391");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_163_p2, "grp_fu_163_p2");
    sc_trace(mVcdFile, tmp_5_reg_396, "tmp_5_reg_396");
    sc_trace(mVcdFile, p_fu_169_p2, "p_fu_169_p2");
    sc_trace(mVcdFile, p_reg_401, "p_reg_401");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_133_p1, "grp_fu_133_p1");
    sc_trace(mVcdFile, tmp_6_reg_406, "tmp_6_reg_406");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_136_p2, "grp_fu_136_p2");
    sc_trace(mVcdFile, x_assign_reg_411, "x_assign_reg_411");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, p_Result_s_reg_416, "p_Result_s_reg_416");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, loc_V_1_fu_194_p1, "loc_V_1_fu_194_p1");
    sc_trace(mVcdFile, loc_V_1_reg_421, "loc_V_1_reg_421");
    sc_trace(mVcdFile, isNeg_fu_208_p3, "isNeg_fu_208_p3");
    sc_trace(mVcdFile, isNeg_reg_426, "isNeg_reg_426");
    sc_trace(mVcdFile, sh_assign_1_fu_226_p3, "sh_assign_1_fu_226_p3");
    sc_trace(mVcdFile, sh_assign_1_reg_431, "sh_assign_1_reg_431");
    sc_trace(mVcdFile, p_Val2_3_fu_292_p3, "p_Val2_3_fu_292_p3");
    sc_trace(mVcdFile, p_Val2_3_reg_436, "p_Val2_3_reg_436");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, i_1_fu_362_p2, "i_1_fu_362_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_ap_start, "grp_convolution2D_fu_119_ap_start");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_ap_idle, "grp_convolution2D_fu_119_ap_idle");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_ap_ready, "grp_convolution2D_fu_119_ap_ready");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_input_img_address0, "grp_convolution2D_fu_119_input_img_address0");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_input_img_ce0, "grp_convolution2D_fu_119_input_img_ce0");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_operator_address0, "grp_convolution2D_fu_119_operator_address0");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_operator_ce0, "grp_convolution2D_fu_119_operator_ce0");
    sc_trace(mVcdFile, grp_convolution2D_fu_119_operator_q0, "grp_convolution2D_fu_119_operator_q0");
    sc_trace(mVcdFile, j_reg_95, "j_reg_95");
    sc_trace(mVcdFile, i_reg_107, "i_reg_107");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond1_fu_141_p2, "exitcond1_fu_141_p2");
    sc_trace(mVcdFile, ap_reg_grp_convolution2D_fu_119_ap_start, "ap_reg_grp_convolution2D_fu_119_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_9_fu_344_p1, "tmp_9_fu_344_p1");
    sc_trace(mVcdFile, icmp_fu_325_p2, "icmp_fu_325_p2");
    sc_trace(mVcdFile, tmp_3_fu_357_p1, "tmp_3_fu_357_p1");
    sc_trace(mVcdFile, tmp_11_fu_331_p1, "tmp_11_fu_331_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, p_Val2_1_fu_173_p1, "p_Val2_1_fu_173_p1");
    sc_trace(mVcdFile, loc_V_fu_184_p4, "loc_V_fu_184_p4");
    sc_trace(mVcdFile, tmp_i_i_i_i_cast1_fu_198_p1, "tmp_i_i_i_i_cast1_fu_198_p1");
    sc_trace(mVcdFile, sh_assign_fu_202_p2, "sh_assign_fu_202_p2");
    sc_trace(mVcdFile, tmp_13_i_i_i_fu_216_p2, "tmp_13_i_i_i_fu_216_p2");
    sc_trace(mVcdFile, tmp_13_i_i_i_cast_fu_222_p1, "tmp_13_i_i_i_cast_fu_222_p1");
    sc_trace(mVcdFile, tmp_i_i_i_fu_234_p4, "tmp_i_i_i_fu_234_p4");
    sc_trace(mVcdFile, sh_assign_1_cast_fu_247_p1, "sh_assign_1_cast_fu_247_p1");
    sc_trace(mVcdFile, tmp_14_i_i_i_cast_fu_254_p1, "tmp_14_i_i_i_cast_fu_254_p1");
    sc_trace(mVcdFile, tmp_i_i_i_cast_fu_243_p1, "tmp_i_i_i_cast_fu_243_p1");
    sc_trace(mVcdFile, tmp_14_i_i_i_fu_250_p1, "tmp_14_i_i_i_fu_250_p1");
    sc_trace(mVcdFile, tmp_15_i_i_i_fu_258_p2, "tmp_15_i_i_i_fu_258_p2");
    sc_trace(mVcdFile, tmp_fu_270_p3, "tmp_fu_270_p3");
    sc_trace(mVcdFile, tmp_16_i_i_i_fu_264_p2, "tmp_16_i_i_i_fu_264_p2");
    sc_trace(mVcdFile, tmp_4_fu_278_p1, "tmp_4_fu_278_p1");
    sc_trace(mVcdFile, tmp_8_fu_282_p4, "tmp_8_fu_282_p4");
    sc_trace(mVcdFile, tmp_18_i_i_i_fu_299_p1, "tmp_18_i_i_i_fu_299_p1");
    sc_trace(mVcdFile, tmp_21_i_i_i_fu_302_p2, "tmp_21_i_i_i_fu_302_p2");
    sc_trace(mVcdFile, p_Val2_s_fu_308_p3, "p_Val2_s_fu_308_p3");
    sc_trace(mVcdFile, tmp_10_fu_315_p4, "tmp_10_fu_315_p4");
    sc_trace(mVcdFile, tmp_7_fu_336_p3, "tmp_7_fu_336_p3");
    sc_trace(mVcdFile, tmp_s_fu_349_p3, "tmp_s_fu_349_p3");
    sc_trace(mVcdFile, grp_fu_159_ce, "grp_fu_159_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_163_ce, "grp_fu_163_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ip_sobel.hdltvin.dat");
    mHdltvoutHandle.open("ip_sobel.hdltvout.dat");
}

ip_sobel::~ip_sobel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete horiz_operator_U;
    delete vert_operator_U;
    delete grp_convolution2D_fu_119;
    delete ip_sobel_uitodp_3eOg_U6;
    delete ip_sobel_dsqrt_64fYi_U7;
    delete ip_sobel_mul_32s_g8j_U8;
    delete ip_sobel_mul_32s_g8j_U9;
}

void ip_sobel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ip_sobel::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_0;
}

void ip_sobel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_convolution2D_fu_119_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(exitcond_fu_147_p2.read(), ap_const_lv1_0)) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
            ap_reg_grp_convolution2D_fu_119_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_convolution2D_fu_119_ap_ready.read())) {
            ap_reg_grp_convolution2D_fu_119_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_141_p2.read(), ap_const_lv1_0))) {
        i_reg_107 = ap_const_lv10_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        i_reg_107 = i_1_fu_362_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_147_p2.read(), ap_const_lv1_1))) {
        j_reg_95 = j_1_fu_153_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_reg_95 = ap_const_lv10_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        isNeg_reg_426 = sh_assign_fu_202_p2.read().range(11, 11);
        loc_V_1_reg_421 = loc_V_1_fu_194_p1.read();
        p_Result_s_reg_416 = p_Val2_1_fu_173_p1.read().range(63, 63);
        sh_assign_1_reg_431 = sh_assign_1_fu_226_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        p_Val2_3_reg_436 = p_Val2_3_fu_292_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        p_reg_401 = p_fu_169_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_convolution2D_fu_119_ap_done.read(), ap_const_logic_1))) {
        tmp1_reg_379 = grp_convolution2D_fu_119_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_2_reg_391 = grp_fu_159_p2.read();
        tmp_5_reg_396 = grp_fu_163_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        tmp_6_reg_406 = grp_fu_133_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        x_assign_reg_411 = grp_fu_136_p2.read();
    }
}

void ip_sobel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ip_sobel::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void ip_sobel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void ip_sobel::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void ip_sobel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ip_sobel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ip_sobel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void ip_sobel::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void ip_sobel::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void ip_sobel::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void ip_sobel::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void ip_sobel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void ip_sobel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void ip_sobel::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void ip_sobel::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void ip_sobel::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void ip_sobel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_141_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ip_sobel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ip_sobel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_141_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ip_sobel::thread_exitcond1_fu_141_p2() {
    exitcond1_fu_141_p2 = (!j_reg_95.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_95.read() == ap_const_lv10_3FF);
}

void ip_sobel::thread_exitcond_fu_147_p2() {
    exitcond_fu_147_p2 = (!i_reg_107.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_107.read() == ap_const_lv10_3FF);
}

void ip_sobel::thread_grp_convolution2D_fu_119_ap_start() {
    grp_convolution2D_fu_119_ap_start = ap_reg_grp_convolution2D_fu_119_ap_start.read();
}

void ip_sobel::thread_grp_convolution2D_fu_119_operator_q0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_convolution2D_fu_119_operator_q0 = vert_operator_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_convolution2D_fu_119_operator_q0 = horiz_operator_q0.read();
    } else {
        grp_convolution2D_fu_119_operator_q0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void ip_sobel::thread_grp_fu_159_ce() {
    if (((esl_seteq<1,1,1>(grp_convolution2D_fu_119_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        grp_fu_159_ce = ap_const_logic_1;
    } else {
        grp_fu_159_ce = ap_const_logic_0;
    }
}

void ip_sobel::thread_grp_fu_163_ce() {
    if (((esl_seteq<1,1,1>(grp_convolution2D_fu_119_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        grp_fu_163_ce = ap_const_logic_1;
    } else {
        grp_fu_163_ce = ap_const_logic_0;
    }
}

void ip_sobel::thread_horiz_operator_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        horiz_operator_ce0 = grp_convolution2D_fu_119_operator_ce0.read();
    } else {
        horiz_operator_ce0 = ap_const_logic_0;
    }
}

void ip_sobel::thread_i_1_fu_362_p2() {
    i_1_fu_362_p2 = (!i_reg_107.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_107.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void ip_sobel::thread_icmp_fu_325_p2() {
    icmp_fu_325_p2 = (!tmp_10_fu_315_p4.read().is_01() || !ap_const_lv24_0.is_01())? sc_lv<1>(): (sc_bigint<24>(tmp_10_fu_315_p4.read()) > sc_bigint<24>(ap_const_lv24_0));
}

void ip_sobel::thread_input_img_address0() {
    input_img_address0 = grp_convolution2D_fu_119_input_img_address0.read();
}

void ip_sobel::thread_input_img_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        input_img_ce0 = grp_convolution2D_fu_119_input_img_ce0.read();
    } else {
        input_img_ce0 = ap_const_logic_0;
    }
}

void ip_sobel::thread_isNeg_fu_208_p3() {
    isNeg_fu_208_p3 = sh_assign_fu_202_p2.read().range(11, 11);
}

void ip_sobel::thread_j_1_fu_153_p2() {
    j_1_fu_153_p2 = (!j_reg_95.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_95.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void ip_sobel::thread_loc_V_1_fu_194_p1() {
    loc_V_1_fu_194_p1 = p_Val2_1_fu_173_p1.read().range(52-1, 0);
}

void ip_sobel::thread_loc_V_fu_184_p4() {
    loc_V_fu_184_p4 = p_Val2_1_fu_173_p1.read().range(62, 52);
}

void ip_sobel::thread_output_img_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_325_p2.read())) {
            output_img_address0 =  (sc_lv<20>) (tmp_3_fu_357_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_325_p2.read())) {
            output_img_address0 =  (sc_lv<20>) (tmp_9_fu_344_p1.read());
        } else {
            output_img_address0 =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        output_img_address0 =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
    }
}

void ip_sobel::thread_output_img_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_325_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_325_p2.read())))) {
        output_img_ce0 = ap_const_logic_1;
    } else {
        output_img_ce0 = ap_const_logic_0;
    }
}

void ip_sobel::thread_output_img_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_325_p2.read())) {
            output_img_d0 = ap_const_lv8_FF;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_325_p2.read())) {
            output_img_d0 = tmp_11_fu_331_p1.read();
        } else {
            output_img_d0 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        output_img_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void ip_sobel::thread_output_img_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_325_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_325_p2.read())))) {
        output_img_we0 = ap_const_logic_1;
    } else {
        output_img_we0 = ap_const_logic_0;
    }
}

void ip_sobel::thread_p_Val2_1_fu_173_p1() {
    p_Val2_1_fu_173_p1 = x_assign_reg_411.read();
}

void ip_sobel::thread_p_Val2_3_fu_292_p3() {
    p_Val2_3_fu_292_p3 = (!isNeg_reg_426.read()[0].is_01())? sc_lv<31>(): ((isNeg_reg_426.read()[0].to_bool())? tmp_4_fu_278_p1.read(): tmp_8_fu_282_p4.read());
}

void ip_sobel::thread_p_Val2_s_fu_308_p3() {
    p_Val2_s_fu_308_p3 = (!p_Result_s_reg_416.read()[0].is_01())? sc_lv<32>(): ((p_Result_s_reg_416.read()[0].to_bool())? tmp_21_i_i_i_fu_302_p2.read(): tmp_18_i_i_i_fu_299_p1.read());
}

void ip_sobel::thread_p_fu_169_p2() {
    p_fu_169_p2 = (!tmp_5_reg_396.read().is_01() || !tmp_2_reg_391.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_5_reg_396.read()) + sc_biguint<32>(tmp_2_reg_391.read()));
}

void ip_sobel::thread_sh_assign_1_cast_fu_247_p1() {
    sh_assign_1_cast_fu_247_p1 = esl_sext<32,12>(sh_assign_1_reg_431.read());
}

void ip_sobel::thread_sh_assign_1_fu_226_p3() {
    sh_assign_1_fu_226_p3 = (!isNeg_fu_208_p3.read()[0].is_01())? sc_lv<12>(): ((isNeg_fu_208_p3.read()[0].to_bool())? tmp_13_i_i_i_cast_fu_222_p1.read(): sh_assign_fu_202_p2.read());
}

void ip_sobel::thread_sh_assign_fu_202_p2() {
    sh_assign_fu_202_p2 = (!ap_const_lv12_C01.is_01() || !tmp_i_i_i_i_cast1_fu_198_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_C01) + sc_biguint<12>(tmp_i_i_i_i_cast1_fu_198_p1.read()));
}

void ip_sobel::thread_tmp_10_fu_315_p4() {
    tmp_10_fu_315_p4 = p_Val2_s_fu_308_p3.read().range(31, 8);
}

void ip_sobel::thread_tmp_11_fu_331_p1() {
    tmp_11_fu_331_p1 = p_Val2_s_fu_308_p3.read().range(8-1, 0);
}

void ip_sobel::thread_tmp_13_i_i_i_cast_fu_222_p1() {
    tmp_13_i_i_i_cast_fu_222_p1 = esl_sext<12,11>(tmp_13_i_i_i_fu_216_p2.read());
}

void ip_sobel::thread_tmp_13_i_i_i_fu_216_p2() {
    tmp_13_i_i_i_fu_216_p2 = (!ap_const_lv11_3FF.is_01() || !loc_V_fu_184_p4.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(loc_V_fu_184_p4.read()));
}

void ip_sobel::thread_tmp_14_i_i_i_cast_fu_254_p1() {
    tmp_14_i_i_i_cast_fu_254_p1 = esl_zext<54,32>(sh_assign_1_cast_fu_247_p1.read());
}

void ip_sobel::thread_tmp_14_i_i_i_fu_250_p1() {
    tmp_14_i_i_i_fu_250_p1 = esl_zext<137,32>(sh_assign_1_cast_fu_247_p1.read());
}

void ip_sobel::thread_tmp_15_i_i_i_fu_258_p2() {
    tmp_15_i_i_i_fu_258_p2 = (!tmp_14_i_i_i_cast_fu_254_p1.read().is_01())? sc_lv<54>(): tmp_i_i_i_fu_234_p4.read() >> (unsigned short)tmp_14_i_i_i_cast_fu_254_p1.read().to_uint();
}

void ip_sobel::thread_tmp_16_i_i_i_fu_264_p2() {
    tmp_16_i_i_i_fu_264_p2 = (!tmp_14_i_i_i_fu_250_p1.read().is_01())? sc_lv<137>(): tmp_i_i_i_cast_fu_243_p1.read() << (unsigned short)tmp_14_i_i_i_fu_250_p1.read().to_uint();
}

void ip_sobel::thread_tmp_18_i_i_i_fu_299_p1() {
    tmp_18_i_i_i_fu_299_p1 = esl_zext<32,31>(p_Val2_3_reg_436.read());
}

void ip_sobel::thread_tmp_21_i_i_i_fu_302_p2() {
    tmp_21_i_i_i_fu_302_p2 = (!ap_const_lv32_0.is_01() || !tmp_18_i_i_i_fu_299_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_18_i_i_i_fu_299_p1.read()));
}

void ip_sobel::thread_tmp_3_fu_357_p1() {
    tmp_3_fu_357_p1 = esl_zext<64,20>(tmp_s_fu_349_p3.read());
}

void ip_sobel::thread_tmp_4_fu_278_p1() {
    tmp_4_fu_278_p1 = esl_zext<31,1>(tmp_fu_270_p3.read());
}

void ip_sobel::thread_tmp_7_fu_336_p3() {
    tmp_7_fu_336_p3 = esl_concat<10,10>(i_reg_107.read(), j_reg_95.read());
}

void ip_sobel::thread_tmp_8_fu_282_p4() {
    tmp_8_fu_282_p4 = tmp_16_i_i_i_fu_264_p2.read().range(83, 53);
}

void ip_sobel::thread_tmp_9_fu_344_p1() {
    tmp_9_fu_344_p1 = esl_zext<64,20>(tmp_7_fu_336_p3.read());
}

void ip_sobel::thread_tmp_fu_270_p3() {
    tmp_fu_270_p3 = tmp_15_i_i_i_fu_258_p2.read().range(53, 53);
}

void ip_sobel::thread_tmp_i_i_i_cast_fu_243_p1() {
    tmp_i_i_i_cast_fu_243_p1 = esl_zext<137,54>(tmp_i_i_i_fu_234_p4.read());
}

void ip_sobel::thread_tmp_i_i_i_fu_234_p4() {
    tmp_i_i_i_fu_234_p4 = esl_concat<53,1>(esl_concat<1,52>(ap_const_lv1_1, loc_V_1_reg_421.read()), ap_const_lv1_0);
}

void ip_sobel::thread_tmp_i_i_i_i_cast1_fu_198_p1() {
    tmp_i_i_i_i_cast1_fu_198_p1 = esl_zext<12,11>(loc_V_fu_184_p4.read());
}

void ip_sobel::thread_tmp_s_fu_349_p3() {
    tmp_s_fu_349_p3 = esl_concat<10,10>(i_reg_107.read(), j_reg_95.read());
}

void ip_sobel::thread_vert_operator_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        vert_operator_ce0 = grp_convolution2D_fu_119_operator_ce0.read();
    } else {
        vert_operator_ce0 = ap_const_logic_0;
    }
}

void ip_sobel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_141_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_147_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_convolution2D_fu_119_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(grp_convolution2D_fu_119_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<49>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void ip_sobel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_img_address0\" :  \"" << input_img_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_img_ce0\" :  \"" << input_img_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_img_q0\" :  \"" << input_img_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_img_address0\" :  \"" << output_img_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_img_ce0\" :  \"" << output_img_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_img_we0\" :  \"" << output_img_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_img_d0\" :  \"" << output_img_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

